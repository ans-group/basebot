{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "name": {
            "type": "string",
            "maxLength": 12,
            "minLength": 6,
            "metadata": {
                "description": "Enter a name for you bot between 6 and 12 characters"
            }
        },
        "ms_app_id": {
            "type": "string",
            "metadata": {
                "description": "Enter your MS Application ID"
            }
        },
        "ms_app_secret": {
            "type": "securestring",
            "metadata": {
                "description": "Enter your MS Application Secret"
            }
        },
        "luis_uri": {
            "type": "string",
            "metadata": {
                "description": "Enter the url of your LUIS.AI endpoint"
            }
        },
        "repo_url": {
            "type": "string",
            "defaultValue": "https://github.com/ans-group/basebot-build.git",
            "metadata": {
                "description": "You can use the default build of the Basebot or enter a public Git repo that contains your forked version of Basebot"
            }
        }
    },
    "variables": {
        "cleanName":    "[replace(parameters('name'),'-', '')]",
        "storageAccountName": "[concat(toLower(variables('cleanName')), uniquestring(resourceGroup().id))]",
        "storageAccountType": "Standard_LRS",
        "botWebSiteName": "[concat(parameters('name'),'-base-bot-server')]",
        "qnaWebSiteName": "[concat(parameters('name'),'-qna-server')]",
        "qnaServiceName": "[concat(parameters('name'), '-qna')]",
        "hostingPlanName": "[concat(parameters('name'),'-app-svc-plan')]",
        "azureSearchName": "[concat(parameters('name'),'-search-service')]",
        "location": "[resourceGroup().location]",
        "skuTier": "Standard",
        "skuName": "S1",
        "workerSize": "0",
        "hostingEnvironment": "",
        "repoUrl": "[parameters('repo_url')]",
        "branch": "master",
        "cryptr": "[uniqueString(resourceGroup().id, deployment().name)]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2017-10-01",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[variables('storageAccountType')]"
            },
            "kind": "StorageV2",
            "properties": {}
        },
        {
            "apiVersion": "2016-09-01",
            "name": "[variables('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[variables('location')]",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "workerSizeId": "[variables('workerSize')]",
                "reserved": false,
                "numberOfWorkers": "1",
                "hostingEnvironment": "[variables('hostingEnvironment')]"
            },
            "sku": {
                "Tier": "[variables('skuTier')]",
                "Name": "[variables('skuName')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ]
        },
        {
            "apiVersion": "2016-08-01",
            "name": "[variables('botWebSiteName')]",
            "type": "Microsoft.Web/sites",
            "properties": {
                "name": "[variables('botWebSiteName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "hostingEnvironment": "[variables('hostingEnvironment')]",
                "siteConfig": {
                    "alwaysOn": true
                }
            },
            "location": "[variables('location')]",
            "resources": [{
                    "apiVersion": "2016-08-01",
                    "name": "web",
                    "type": "sourcecontrols",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('botWebSiteName'))]",
                        "[concat('Microsoft.Web/Sites/', variables('botWebSiteName'), '/config/appsettings')]"
                    ],
                    "properties": {
                        "RepoUrl": "[variables('repoUrl')]",
                        "branch": "[variables('branch')]",
                        "IsManualIntegration": true
                    }
                },
                {
                    "apiVersion": "2016-08-01",
                    "name": "appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('botWebSiteName'))]"
                    ],
                    "properties": {
                        "WEBSITE_NODE_DEFAULT_VERSION": "10.14.1",
                        "MS_APP_ID ": "[parameters('ms_app_id')]",
                        "MS_APP_PASSWORD": "[parameters('ms_app_secret')]",
                        "MS_APP_SCOPES": "openid profile offline_access User.Read Calendars.Read",
                        "MS_REDIRECT_URI": "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('botWebSiteName'))).hostnames[0],'/authorize')]",
                        "LUIS_URI": "[parameters('luis_uri')]",
                        "DB_URL": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountName'),'2016-12-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
                        "ENV": "production",
                        "FIREBASE": "",
                        "CRYPTR_SECRET": "[variables('cryptr')]",
                        "BOT_NAME": "[parameters('name')]",
                        "QNA_HOST": "[concat('https://',reference(resourceId('Microsoft.Web/sites', variables('qnaWebSiteName'))).hostNames[0],'/qnamaker')]",
                        "QNA_KBID": "",
                        "QNA_KEY": "",
                        "QNA_THRESHOLD": "80"
                    }
                }
            ],
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Web/Sites', variables('qnaWebSiteName'))]"

            ]
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2016-08-01",
            "name": "[variables('qnaWebSiteName')]",
            "location": "[variables('location')]",
            "properties": {
                "enabled": true,
                "siteConfig": {
                    "cors": {
                        "allowedOrigins": [
                            "*"
                        ]
                    },
                    "alwaysOn": true
                },
                "name": "[variables('qnaWebSiteName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "hostingEnvironment": "[variables('hostingEnvironment')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
            ],
            "resources": [
                {
                    "apiVersion": "2015-08-01",
                    "name": "appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('qnaWebSiteName'))]",
                        "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]"
                    ],
                    "properties": {
                        "AzureSearchName": "[variables('azureSearchName')]",
                        "AzureSearchAdminKey": "[listAdminKeys(resourceId('Microsoft.Search/searchServices/', variables('azureSearchName')), '2015-08-19').primaryKey]",
                        "PrimaryEndpointKey": "[concat(variables('qnaWebSiteName'), '-PrimaryEndpointKey')]",
                        "SecondaryEndpointKey": "[concat(variables('qnaWebSiteName'), '-SecondaryEndpointKey')]",
                        "DefaultAnswer": "No good match found in KB.",
                        "QNAMAKER_EXTENSION_VERSION": "latest"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "kind": "QnAMaker",
            "name": "[variables('qnaServiceName')]",
            "apiVersion": "2017-04-18",
            "location": "westus",
            "sku": {
                "name": "F0"
            },
            "properties": {
                "apiProperties": {
                    "qnaRuntimeEndpoint": "[concat('https://',reference(resourceId('Microsoft.Web/sites', variables('qnaWebSiteName'))).hostNames[0])]"
                }
            }
        },
        {
            "name": "[variables('azureSearchName')]",
            "type": "Microsoft.Search/searchServices",
            "apiVersion": "2015-08-19",
            "location": "[variables('location')]",
            "tags": {},
            "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "Default"
            },
            "sku": {
                "name": "free"
            }
        }
    ],
    "outputs": {
        "BotEndpoint": {
            "type": "string",
            "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('botWebSiteName'))).hostnames[0])]"
        },
        "MessagingEndpoint": {
            "type": "string",
            "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('botWebSiteName'))).hostnames[0],'/botframework/receive')]"
        },
        "WebAppRedirectUrl": {
            "type": "string",
            "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', variables('botWebSiteName'))).hostnames[0],'/authorize')]"
        },
        "qnaRuntimeEndpoint": {
            "type": "string",
            "value": "[concat('https://',reference(resourceId('Microsoft.Web/sites', variables('qnaWebSiteName'))).hostNames[0],'/qnamaker')]"
        },
        "CryptrString": {
            "type": "string",
            "value": "[variables('cryptr')]"
        }
    }
}