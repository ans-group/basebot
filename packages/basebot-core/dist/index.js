"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.init = void 0;var _configParser = require("./configParser");
var _server = _interopRequireDefault(require("./server"));
var _applySkills = _interopRequireDefault(require("./applySkills"));
var _startChannels = _interopRequireDefault(require("./startChannels"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}function _typeof(obj) {if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}

var init = function init(_ref) {var skills = _ref.skills,config = _ref.config;
  var logger = (0, _configParser.getSingleModule)(config.logger);
  var channels = (0, _configParser.getAllModules)(config.channels);
  var rawMiddleware = (0, _configParser.getAllModules)(config.middleware);
  var models = (0, _configParser.getAllModels)(rawMiddleware);
  var storage = (0, _configParser.getSingleModule)(config.storage)({ logger: logger, models: models && Array.isArray(models) && models.length && _typeof(models[0]) === 'object' ? Object.assign.apply(Object, _toConsumableArray(models)) : models });
  var middleware = rawMiddleware.map(function (mw) {return mw({ storage: storage, logger: logger });});
  var info = logger('core', 'info');var _Server =
  (0, _server["default"])({ logger: logger }),server = _Server.server,app = _Server.app;
  var controllers = (0, _startChannels["default"])({ channels: channels, storage: storage, logger: logger, server: server, app: app });

  // start server
  if (process.env.NODE_ENV !== 'test') {
    setTimeout(function () {
      info('setting up server on port: ' + (process.env.PORT || 3000));
      server.listen(process.env.PORT || 3000);
    });
  }

  (0, _applySkills["default"])({ channels: controllers, middleware: middleware, logger: logger, skills: skills });
  return {
    controllers: controllers,
    storage: storage,
    logger: logger };

};exports.init = init;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbml0Iiwic2tpbGxzIiwiY29uZmlnIiwibG9nZ2VyIiwiY2hhbm5lbHMiLCJyYXdNaWRkbGV3YXJlIiwibWlkZGxld2FyZSIsIm1vZGVscyIsInN0b3JhZ2UiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJPYmplY3QiLCJhc3NpZ24iLCJtYXAiLCJtdyIsImluZm8iLCJzZXJ2ZXIiLCJhcHAiLCJjb250cm9sbGVycyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInNldFRpbWVvdXQiLCJQT1JUIiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiaUdBQUE7QUFDQTtBQUNBO0FBQ0Esd0U7O0FBRU8sSUFBTUEsSUFBSSxHQUFHLFNBQVBBLElBQU8sT0FBd0IsS0FBckJDLE1BQXFCLFFBQXJCQSxNQUFxQixDQUFiQyxNQUFhLFFBQWJBLE1BQWE7QUFDMUMsTUFBTUMsTUFBTSxHQUFHLG1DQUFnQkQsTUFBTSxDQUFDQyxNQUF2QixDQUFmO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLGlDQUFjRixNQUFNLENBQUNFLFFBQXJCLENBQWpCO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLGlDQUFjSCxNQUFNLENBQUNJLFVBQXJCLENBQXRCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLGdDQUFhRixhQUFiLENBQWY7QUFDQSxNQUFNRyxPQUFPLEdBQUcsbUNBQWdCTixNQUFNLENBQUNNLE9BQXZCLEVBQWdDLEVBQUVMLE1BQU0sRUFBTkEsTUFBRixFQUFVSSxNQUFNLEVBQUVBLE1BQU0sSUFBSUUsS0FBSyxDQUFDQyxPQUFOLENBQWNILE1BQWQsQ0FBVixJQUFtQ0EsTUFBTSxDQUFDSSxNQUExQyxJQUFvRCxRQUFPSixNQUFNLENBQUMsQ0FBRCxDQUFiLE1BQXFCLFFBQXpFLEdBQW9GSyxNQUFNLENBQUNDLE1BQVAsT0FBQUQsTUFBTSxxQkFBV0wsTUFBWCxFQUExRixHQUErR0EsTUFBakksRUFBaEMsQ0FBaEI7QUFDQSxNQUFNRCxVQUFVLEdBQUdELGFBQWEsQ0FBQ1MsR0FBZCxDQUFrQixVQUFBQyxFQUFFLFVBQUlBLEVBQUUsQ0FBQyxFQUFFUCxPQUFPLEVBQVBBLE9BQUYsRUFBV0wsTUFBTSxFQUFOQSxNQUFYLEVBQUQsQ0FBTixFQUFwQixDQUFuQjtBQUNBLE1BQU1hLElBQUksR0FBR2IsTUFBTSxDQUFDLE1BQUQsRUFBUyxNQUFULENBQW5CLENBUDBDO0FBUWxCLDBCQUFPLEVBQUVBLE1BQU0sRUFBTkEsTUFBRixFQUFQLENBUmtCLENBUWxDYyxNQVJrQyxXQVFsQ0EsTUFSa0MsQ0FRMUJDLEdBUjBCLFdBUTFCQSxHQVIwQjtBQVMxQyxNQUFNQyxXQUFXLEdBQUcsK0JBQWMsRUFBRWYsUUFBUSxFQUFSQSxRQUFGLEVBQVlJLE9BQU8sRUFBUEEsT0FBWixFQUFxQkwsTUFBTSxFQUFOQSxNQUFyQixFQUE2QmMsTUFBTSxFQUFOQSxNQUE3QixFQUFxQ0MsR0FBRyxFQUFIQSxHQUFyQyxFQUFkLENBQXBCOztBQUVBO0FBQ0EsTUFBSUUsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsTUFBN0IsRUFBcUM7QUFDbkNDLElBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2ZQLE1BQUFBLElBQUksQ0FBQyxpQ0FBaUNJLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxJQUFaLElBQW9CLElBQXJELENBQUQsQ0FBSjtBQUNBUCxNQUFBQSxNQUFNLENBQUNRLE1BQVAsQ0FBY0wsT0FBTyxDQUFDQyxHQUFSLENBQVlHLElBQVosSUFBb0IsSUFBbEM7QUFDRCxLQUhTLENBQVY7QUFJRDs7QUFFRCwrQkFBWSxFQUFFcEIsUUFBUSxFQUFFZSxXQUFaLEVBQXlCYixVQUFVLEVBQVZBLFVBQXpCLEVBQXFDSCxNQUFNLEVBQU5BLE1BQXJDLEVBQTZDRixNQUFNLEVBQU5BLE1BQTdDLEVBQVo7QUFDQSxTQUFPO0FBQ0xrQixJQUFBQSxXQUFXLEVBQVhBLFdBREs7QUFFTFgsSUFBQUEsT0FBTyxFQUFQQSxPQUZLO0FBR0xMLElBQUFBLE1BQU0sRUFBTkEsTUFISyxFQUFQOztBQUtELENBekJNLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRBbGxNb2R1bGVzLCBnZXRTaW5nbGVNb2R1bGUsIGdldEFsbE1vZGVscyB9IGZyb20gJy4vY29uZmlnUGFyc2VyJ1xuaW1wb3J0IFNlcnZlciBmcm9tICcuL3NlcnZlcidcbmltcG9ydCBhcHBseVNraWxscyBmcm9tICcuL2FwcGx5U2tpbGxzJ1xuaW1wb3J0IHN0YXJ0Q2hhbm5lbHMgZnJvbSAnLi9zdGFydENoYW5uZWxzJ1xuXG5leHBvcnQgY29uc3QgaW5pdCA9ICh7IHNraWxscywgY29uZmlnIH0pID0+IHtcbiAgY29uc3QgbG9nZ2VyID0gZ2V0U2luZ2xlTW9kdWxlKGNvbmZpZy5sb2dnZXIpXG4gIGNvbnN0IGNoYW5uZWxzID0gZ2V0QWxsTW9kdWxlcyhjb25maWcuY2hhbm5lbHMpXG4gIGNvbnN0IHJhd01pZGRsZXdhcmUgPSBnZXRBbGxNb2R1bGVzKGNvbmZpZy5taWRkbGV3YXJlKVxuICBjb25zdCBtb2RlbHMgPSBnZXRBbGxNb2RlbHMocmF3TWlkZGxld2FyZSlcbiAgY29uc3Qgc3RvcmFnZSA9IGdldFNpbmdsZU1vZHVsZShjb25maWcuc3RvcmFnZSkoeyBsb2dnZXIsIG1vZGVsczogbW9kZWxzICYmIEFycmF5LmlzQXJyYXkobW9kZWxzKSAmJiBtb2RlbHMubGVuZ3RoICYmIHR5cGVvZiBtb2RlbHNbMF0gPT09ICdvYmplY3QnID8gT2JqZWN0LmFzc2lnbiguLi5tb2RlbHMpIDogbW9kZWxzIH0pXG4gIGNvbnN0IG1pZGRsZXdhcmUgPSByYXdNaWRkbGV3YXJlLm1hcChtdyA9PiBtdyh7IHN0b3JhZ2UsIGxvZ2dlciB9KSlcbiAgY29uc3QgaW5mbyA9IGxvZ2dlcignY29yZScsICdpbmZvJylcbiAgY29uc3QgeyBzZXJ2ZXIsIGFwcCB9ID0gU2VydmVyKHsgbG9nZ2VyIH0pXG4gIGNvbnN0IGNvbnRyb2xsZXJzID0gc3RhcnRDaGFubmVscyh7IGNoYW5uZWxzLCBzdG9yYWdlLCBsb2dnZXIsIHNlcnZlciwgYXBwIH0pXG5cbiAgLy8gc3RhcnQgc2VydmVyXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpbmZvKCdzZXR0aW5nIHVwIHNlcnZlciBvbiBwb3J0OiAnICsgKHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMCkpXG4gICAgICBzZXJ2ZXIubGlzdGVuKHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMClcbiAgICB9KVxuICB9XG5cbiAgYXBwbHlTa2lsbHMoeyBjaGFubmVsczogY29udHJvbGxlcnMsIG1pZGRsZXdhcmUsIGxvZ2dlciwgc2tpbGxzIH0pXG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcnMsXG4gICAgc3RvcmFnZSxcbiAgICBsb2dnZXJcbiAgfVxufVxuIl19