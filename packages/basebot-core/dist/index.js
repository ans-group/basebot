"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.init = void 0;var _configParser = require("./configParser");
var _server = _interopRequireDefault(require("./server"));
var _applySkills = _interopRequireDefault(require("./applySkills"));
var _startChannels = _interopRequireDefault(require("./startChannels"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}

var init = function init(_ref) {var skills = _ref.skills,config = _ref.config;
  var logger = (0, _configParser.getSingleModule)(config.logger);
  var channels = (0, _configParser.getAllModules)(config.channels);
  var rawMiddleware = (0, _configParser.getAllModules)(config.middleware);
  var models = (0, _configParser.getAllModels)(rawMiddleware);
  var storage = (0, _configParser.getSingleModule)(config.storage)({ logger: logger, models: Object.assign.apply(Object, _toConsumableArray(models)) });
  var middleware = rawMiddleware.map(function (mw) {return mw({ storage: storage, logger: logger });});
  var info = logger('core', 'info');var _Server =
  (0, _server["default"])({ logger: logger }),server = _Server.server,app = _Server.app;
  var controllers = (0, _startChannels["default"])({ channels: channels, storage: storage, logger: logger, server: server, app: app });
  // start server
  if (process.env.NODE_ENV !== 'test') {
    info('setting up server on port: ' + (process.env.PORT || 3000));
    app.listen(process.env.PORT || 3000);
  }

  (0, _applySkills["default"])({ channels: controllers, middleware: middleware, logger: logger, skills: skills });
  return {
    controllers: controllers,
    storage: storage,
    logger: logger };

};exports.init = init;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbml0Iiwic2tpbGxzIiwiY29uZmlnIiwibG9nZ2VyIiwiY2hhbm5lbHMiLCJyYXdNaWRkbGV3YXJlIiwibWlkZGxld2FyZSIsIm1vZGVscyIsInN0b3JhZ2UiLCJPYmplY3QiLCJhc3NpZ24iLCJtYXAiLCJtdyIsImluZm8iLCJzZXJ2ZXIiLCJhcHAiLCJjb250cm9sbGVycyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIlBPUlQiLCJsaXN0ZW4iXSwibWFwcGluZ3MiOiJpR0FBQTtBQUNBO0FBQ0E7QUFDQSx3RTs7QUFFTyxJQUFNQSxJQUFJLEdBQUcsU0FBUEEsSUFBTyxPQUF3QixLQUFyQkMsTUFBcUIsUUFBckJBLE1BQXFCLENBQWJDLE1BQWEsUUFBYkEsTUFBYTtBQUMxQyxNQUFNQyxNQUFNLEdBQUcsbUNBQWdCRCxNQUFNLENBQUNDLE1BQXZCLENBQWY7QUFDQSxNQUFNQyxRQUFRLEdBQUcsaUNBQWNGLE1BQU0sQ0FBQ0UsUUFBckIsQ0FBakI7QUFDQSxNQUFNQyxhQUFhLEdBQUcsaUNBQWNILE1BQU0sQ0FBQ0ksVUFBckIsQ0FBdEI7QUFDQSxNQUFNQyxNQUFNLEdBQUcsZ0NBQWFGLGFBQWIsQ0FBZjtBQUNBLE1BQU1HLE9BQU8sR0FBRyxtQ0FBZ0JOLE1BQU0sQ0FBQ00sT0FBdkIsRUFBZ0MsRUFBRUwsTUFBTSxFQUFOQSxNQUFGLEVBQVVJLE1BQU0sRUFBRUUsTUFBTSxDQUFDQyxNQUFQLE9BQUFELE1BQU0scUJBQVdGLE1BQVgsRUFBeEIsRUFBaEMsQ0FBaEI7QUFDQSxNQUFNRCxVQUFVLEdBQUdELGFBQWEsQ0FBQ00sR0FBZCxDQUFrQixVQUFBQyxFQUFFLFVBQUlBLEVBQUUsQ0FBQyxFQUFFSixPQUFPLEVBQVBBLE9BQUYsRUFBV0wsTUFBTSxFQUFOQSxNQUFYLEVBQUQsQ0FBTixFQUFwQixDQUFuQjtBQUNBLE1BQU1VLElBQUksR0FBR1YsTUFBTSxDQUFDLE1BQUQsRUFBUyxNQUFULENBQW5CLENBUDBDO0FBUWxCLDBCQUFPLEVBQUVBLE1BQU0sRUFBTkEsTUFBRixFQUFQLENBUmtCLENBUWxDVyxNQVJrQyxXQVFsQ0EsTUFSa0MsQ0FRMUJDLEdBUjBCLFdBUTFCQSxHQVIwQjtBQVMxQyxNQUFNQyxXQUFXLEdBQUcsK0JBQWMsRUFBRVosUUFBUSxFQUFSQSxRQUFGLEVBQVlJLE9BQU8sRUFBUEEsT0FBWixFQUFxQkwsTUFBTSxFQUFOQSxNQUFyQixFQUE2QlcsTUFBTSxFQUFOQSxNQUE3QixFQUFxQ0MsR0FBRyxFQUFIQSxHQUFyQyxFQUFkLENBQXBCO0FBQ0E7QUFDQSxNQUFJRSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixNQUE3QixFQUFxQztBQUNuQ04sSUFBQUEsSUFBSSxDQUFDLGlDQUFpQ0ksT0FBTyxDQUFDQyxHQUFSLENBQVlFLElBQVosSUFBb0IsSUFBckQsQ0FBRCxDQUFKO0FBQ0FMLElBQUFBLEdBQUcsQ0FBQ00sTUFBSixDQUFXSixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsSUFBWixJQUFvQixJQUEvQjtBQUNEOztBQUVELCtCQUFZLEVBQUVoQixRQUFRLEVBQUVZLFdBQVosRUFBeUJWLFVBQVUsRUFBVkEsVUFBekIsRUFBcUNILE1BQU0sRUFBTkEsTUFBckMsRUFBNkNGLE1BQU0sRUFBTkEsTUFBN0MsRUFBWjtBQUNBLFNBQU87QUFDTGUsSUFBQUEsV0FBVyxFQUFYQSxXQURLO0FBRUxSLElBQUFBLE9BQU8sRUFBUEEsT0FGSztBQUdMTCxJQUFBQSxNQUFNLEVBQU5BLE1BSEssRUFBUDs7QUFLRCxDQXRCTSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWxsTW9kdWxlcywgZ2V0U2luZ2xlTW9kdWxlLCBnZXRBbGxNb2RlbHMgfSBmcm9tICcuL2NvbmZpZ1BhcnNlcidcbmltcG9ydCBTZXJ2ZXIgZnJvbSAnLi9zZXJ2ZXInXG5pbXBvcnQgYXBwbHlTa2lsbHMgZnJvbSAnLi9hcHBseVNraWxscydcbmltcG9ydCBzdGFydENoYW5uZWxzIGZyb20gJy4vc3RhcnRDaGFubmVscydcblxuZXhwb3J0IGNvbnN0IGluaXQgPSAoeyBza2lsbHMsIGNvbmZpZyB9KSA9PiB7XG4gIGNvbnN0IGxvZ2dlciA9IGdldFNpbmdsZU1vZHVsZShjb25maWcubG9nZ2VyKVxuICBjb25zdCBjaGFubmVscyA9IGdldEFsbE1vZHVsZXMoY29uZmlnLmNoYW5uZWxzKVxuICBjb25zdCByYXdNaWRkbGV3YXJlID0gZ2V0QWxsTW9kdWxlcyhjb25maWcubWlkZGxld2FyZSlcbiAgY29uc3QgbW9kZWxzID0gZ2V0QWxsTW9kZWxzKHJhd01pZGRsZXdhcmUpXG4gIGNvbnN0IHN0b3JhZ2UgPSBnZXRTaW5nbGVNb2R1bGUoY29uZmlnLnN0b3JhZ2UpKHsgbG9nZ2VyLCBtb2RlbHM6IE9iamVjdC5hc3NpZ24oLi4ubW9kZWxzKSB9KVxuICBjb25zdCBtaWRkbGV3YXJlID0gcmF3TWlkZGxld2FyZS5tYXAobXcgPT4gbXcoeyBzdG9yYWdlLCBsb2dnZXIgfSkpXG4gIGNvbnN0IGluZm8gPSBsb2dnZXIoJ2NvcmUnLCAnaW5mbycpXG4gIGNvbnN0IHsgc2VydmVyLCBhcHAgfSA9IFNlcnZlcih7IGxvZ2dlciB9KVxuICBjb25zdCBjb250cm9sbGVycyA9IHN0YXJ0Q2hhbm5lbHMoeyBjaGFubmVscywgc3RvcmFnZSwgbG9nZ2VyLCBzZXJ2ZXIsIGFwcCB9KVxuICAvLyBzdGFydCBzZXJ2ZXJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHtcbiAgICBpbmZvKCdzZXR0aW5nIHVwIHNlcnZlciBvbiBwb3J0OiAnICsgKHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMCkpXG4gICAgYXBwLmxpc3Rlbihwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDApXG4gIH1cblxuICBhcHBseVNraWxscyh7IGNoYW5uZWxzOiBjb250cm9sbGVycywgbWlkZGxld2FyZSwgbG9nZ2VyLCBza2lsbHMgfSlcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVycyxcbiAgICBzdG9yYWdlLFxuICAgIGxvZ2dlclxuICB9XG59XG4iXX0=