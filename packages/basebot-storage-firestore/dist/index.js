"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _firebase = _interopRequireDefault(require("./firebase"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}var _default =

function _default() {var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {return console.log;};
  var debug = logger('services:storage:azureTables', 'debug');
  var error = logger('services:storage:azureTables', 'error');

  var teamsRef = _firebase["default"].collection('teams');
  var usersRef = _firebase["default"].collection('users');
  var channelsRef = _firebase["default"].collection('channels');

  var driver = {
    teams: {
      get: get(teamsRef),
      save: save(teamsRef),
      all: all(teamsRef) },

    channels: {
      get: get(channelsRef),
      save: save(channelsRef),
      all: all(channelsRef) },

    users: {
      get: get(usersRef),
      save: save(usersRef),
      all: all(usersRef) } };



  function get(firebaseRef) {
    return function (id) {return new Promise(function (resolve, reject) {return firebaseRef.doc(id).get().then(function (doc) {
          debug("attempting to fetch document with ID: ".concat(id));
          if (!doc.exists) {
            reject(Error('Document not found'));
            err('Document not found');
          } else {
            debug("document retrieved:", doc.data());
            resolve(doc.data());
          }
        })["catch"](reject);});};
  }

  function save(firebaseRef) {
    return function (data) {
      debug('saving: ', data);
      return firebaseRef.doc(data.id).set(data, { merge: true });
    };
  }

  function all(firebaseRef) {
    return function () {return new Promise(function (resolve, reject) {return firebaseRef.get().then(function (snapshot) {
          debug("fetching all ".concat(firebaseRef, " records"));
          resolve(snapshot.toArray().map(function (doc) {return doc.data();}));
        })["catch"](function (err) {
          error(err);
          reject(err);
        });});};
  }

  return driver;
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImNvbnNvbGUiLCJsb2ciLCJkZWJ1ZyIsImVycm9yIiwidGVhbXNSZWYiLCJkYiIsImNvbGxlY3Rpb24iLCJ1c2Vyc1JlZiIsImNoYW5uZWxzUmVmIiwiZHJpdmVyIiwidGVhbXMiLCJnZXQiLCJzYXZlIiwiYWxsIiwiY2hhbm5lbHMiLCJ1c2VycyIsImZpcmViYXNlUmVmIiwiaWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRvYyIsInRoZW4iLCJleGlzdHMiLCJFcnJvciIsImVyciIsImRhdGEiLCJzZXQiLCJtZXJnZSIsInNuYXBzaG90IiwidG9BcnJheSIsIm1hcCJdLCJtYXBwaW5ncyI6InVHQUFBLDhEOztBQUVlLG9CQUFnQyxLQUEvQkEsTUFBK0IsdUVBQXRCLG9CQUFNQyxPQUFPLENBQUNDLEdBQWQsRUFBc0I7QUFDN0MsTUFBTUMsS0FBSyxHQUFHSCxNQUFNLENBQUMsOEJBQUQsRUFBaUMsT0FBakMsQ0FBcEI7QUFDQSxNQUFNSSxLQUFLLEdBQUdKLE1BQU0sQ0FBQyw4QkFBRCxFQUFpQyxPQUFqQyxDQUFwQjs7QUFFQSxNQUFNSyxRQUFRLEdBQUdDLHFCQUFHQyxVQUFILENBQWMsT0FBZCxDQUFqQjtBQUNBLE1BQU1DLFFBQVEsR0FBR0YscUJBQUdDLFVBQUgsQ0FBYyxPQUFkLENBQWpCO0FBQ0EsTUFBTUUsV0FBVyxHQUFHSCxxQkFBR0MsVUFBSCxDQUFjLFVBQWQsQ0FBcEI7O0FBRUEsTUFBTUcsTUFBTSxHQUFHO0FBQ2JDLElBQUFBLEtBQUssRUFBRTtBQUNMQyxNQUFBQSxHQUFHLEVBQUVBLEdBQUcsQ0FBQ1AsUUFBRCxDQURIO0FBRUxRLE1BQUFBLElBQUksRUFBRUEsSUFBSSxDQUFDUixRQUFELENBRkw7QUFHTFMsTUFBQUEsR0FBRyxFQUFFQSxHQUFHLENBQUNULFFBQUQsQ0FISCxFQURNOztBQU1iVSxJQUFBQSxRQUFRLEVBQUU7QUFDUkgsTUFBQUEsR0FBRyxFQUFFQSxHQUFHLENBQUNILFdBQUQsQ0FEQTtBQUVSSSxNQUFBQSxJQUFJLEVBQUVBLElBQUksQ0FBQ0osV0FBRCxDQUZGO0FBR1JLLE1BQUFBLEdBQUcsRUFBRUEsR0FBRyxDQUFDTCxXQUFELENBSEEsRUFORzs7QUFXYk8sSUFBQUEsS0FBSyxFQUFFO0FBQ0xKLE1BQUFBLEdBQUcsRUFBRUEsR0FBRyxDQUFDSixRQUFELENBREg7QUFFTEssTUFBQUEsSUFBSSxFQUFFQSxJQUFJLENBQUNMLFFBQUQsQ0FGTDtBQUdMTSxNQUFBQSxHQUFHLEVBQUVBLEdBQUcsQ0FBQ04sUUFBRCxDQUhILEVBWE0sRUFBZjs7OztBQWtCQSxXQUFTSSxHQUFULENBQWFLLFdBQWIsRUFBMEI7QUFDeEIsV0FBTyxVQUFBQyxFQUFFLFVBQUksSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixVQUFxQkosV0FBVyxDQUFDSyxHQUFaLENBQWdCSixFQUFoQixFQUFvQk4sR0FBcEIsR0FBMEJXLElBQTFCLENBQStCLFVBQUFELEdBQUcsRUFBSTtBQUNsRm5CLFVBQUFBLEtBQUssaURBQTBDZSxFQUExQyxFQUFMO0FBQ0EsY0FBSSxDQUFDSSxHQUFHLENBQUNFLE1BQVQsRUFBaUI7QUFDZkgsWUFBQUEsTUFBTSxDQUFDSSxLQUFLLENBQUMsb0JBQUQsQ0FBTixDQUFOO0FBQ0FDLFlBQUFBLEdBQUcsQ0FBQyxvQkFBRCxDQUFIO0FBQ0QsV0FIRCxNQUdPO0FBQ0x2QixZQUFBQSxLQUFLLHdCQUF3Qm1CLEdBQUcsQ0FBQ0ssSUFBSixFQUF4QixDQUFMO0FBQ0FQLFlBQUFBLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDSyxJQUFKLEVBQUQsQ0FBUDtBQUNEO0FBQ0YsU0FUNkMsV0FTckNOLE1BVHFDLENBQXJCLEVBQVosQ0FBSixFQUFUO0FBVUQ7O0FBRUQsV0FBU1IsSUFBVCxDQUFjSSxXQUFkLEVBQTJCO0FBQ3pCLFdBQU8sVUFBQVUsSUFBSSxFQUFJO0FBQ2J4QixNQUFBQSxLQUFLLENBQUMsVUFBRCxFQUFhd0IsSUFBYixDQUFMO0FBQ0EsYUFBT1YsV0FBVyxDQUFDSyxHQUFaLENBQWdCSyxJQUFJLENBQUNULEVBQXJCLEVBQXlCVSxHQUF6QixDQUE2QkQsSUFBN0IsRUFBbUMsRUFBRUUsS0FBSyxFQUFFLElBQVQsRUFBbkMsQ0FBUDtBQUNELEtBSEQ7QUFJRDs7QUFFRCxXQUFTZixHQUFULENBQWFHLFdBQWIsRUFBMEI7QUFDeEIsV0FBTyxvQkFBTSxJQUFJRSxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLFVBQXFCSixXQUFXLENBQUNMLEdBQVosR0FBa0JXLElBQWxCLENBQXVCLFVBQUFPLFFBQVEsRUFBSTtBQUMvRTNCLFVBQUFBLEtBQUssd0JBQWlCYyxXQUFqQixjQUFMO0FBQ0FHLFVBQUFBLE9BQU8sQ0FBQ1UsUUFBUSxDQUFDQyxPQUFULEdBQW1CQyxHQUFuQixDQUF1QixVQUFBVixHQUFHLFVBQUlBLEdBQUcsQ0FBQ0ssSUFBSixFQUFKLEVBQTFCLENBQUQsQ0FBUDtBQUNELFNBSDZDLFdBR3JDLFVBQUFELEdBQUcsRUFBSTtBQUNkdEIsVUFBQUEsS0FBSyxDQUFDc0IsR0FBRCxDQUFMO0FBQ0FMLFVBQUFBLE1BQU0sQ0FBQ0ssR0FBRCxDQUFOO0FBQ0QsU0FONkMsQ0FBckIsRUFBWixDQUFOLEVBQVA7QUFPRDs7QUFFRCxTQUFPaEIsTUFBUDtBQUNELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGIgZnJvbSAnLi9maXJlYmFzZSdcblxuZXhwb3J0IGRlZmF1bHQgKGxvZ2dlciA9ICgpID0+IGNvbnNvbGUubG9nKSA9PiB7XG4gIGNvbnN0IGRlYnVnID0gbG9nZ2VyKCdzZXJ2aWNlczpzdG9yYWdlOmF6dXJlVGFibGVzJywgJ2RlYnVnJylcbiAgY29uc3QgZXJyb3IgPSBsb2dnZXIoJ3NlcnZpY2VzOnN0b3JhZ2U6YXp1cmVUYWJsZXMnLCAnZXJyb3InKVxuXG4gIGNvbnN0IHRlYW1zUmVmID0gZGIuY29sbGVjdGlvbigndGVhbXMnKVxuICBjb25zdCB1c2Vyc1JlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJylcbiAgY29uc3QgY2hhbm5lbHNSZWYgPSBkYi5jb2xsZWN0aW9uKCdjaGFubmVscycpXG5cbiAgY29uc3QgZHJpdmVyID0ge1xuICAgIHRlYW1zOiB7XG4gICAgICBnZXQ6IGdldCh0ZWFtc1JlZiksXG4gICAgICBzYXZlOiBzYXZlKHRlYW1zUmVmKSxcbiAgICAgIGFsbDogYWxsKHRlYW1zUmVmKVxuICAgIH0sXG4gICAgY2hhbm5lbHM6IHtcbiAgICAgIGdldDogZ2V0KGNoYW5uZWxzUmVmKSxcbiAgICAgIHNhdmU6IHNhdmUoY2hhbm5lbHNSZWYpLFxuICAgICAgYWxsOiBhbGwoY2hhbm5lbHNSZWYpXG4gICAgfSxcbiAgICB1c2Vyczoge1xuICAgICAgZ2V0OiBnZXQodXNlcnNSZWYpLFxuICAgICAgc2F2ZTogc2F2ZSh1c2Vyc1JlZiksXG4gICAgICBhbGw6IGFsbCh1c2Vyc1JlZilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXQoZmlyZWJhc2VSZWYpIHtcbiAgICByZXR1cm4gaWQgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gZmlyZWJhc2VSZWYuZG9jKGlkKS5nZXQoKS50aGVuKGRvYyA9PiB7XG4gICAgICBkZWJ1ZyhgYXR0ZW1wdGluZyB0byBmZXRjaCBkb2N1bWVudCB3aXRoIElEOiAke2lkfWApXG4gICAgICBpZiAoIWRvYy5leGlzdHMpIHtcbiAgICAgICAgcmVqZWN0KEVycm9yKCdEb2N1bWVudCBub3QgZm91bmQnKSlcbiAgICAgICAgZXJyKCdEb2N1bWVudCBub3QgZm91bmQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoYGRvY3VtZW50IHJldHJpZXZlZDpgLCBkb2MuZGF0YSgpKVxuICAgICAgICByZXNvbHZlKGRvYy5kYXRhKCkpXG4gICAgICB9XG4gICAgfSkuY2F0Y2gocmVqZWN0KSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhdmUoZmlyZWJhc2VSZWYpIHtcbiAgICByZXR1cm4gZGF0YSA9PiB7XG4gICAgICBkZWJ1Zygnc2F2aW5nOiAnLCBkYXRhKVxuICAgICAgcmV0dXJuIGZpcmViYXNlUmVmLmRvYyhkYXRhLmlkKS5zZXQoZGF0YSwgeyBtZXJnZTogdHJ1ZSB9KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFsbChmaXJlYmFzZVJlZikge1xuICAgIHJldHVybiAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBmaXJlYmFzZVJlZi5nZXQoKS50aGVuKHNuYXBzaG90ID0+IHtcbiAgICAgIGRlYnVnKGBmZXRjaGluZyBhbGwgJHtmaXJlYmFzZVJlZn0gcmVjb3Jkc2ApXG4gICAgICByZXNvbHZlKHNuYXBzaG90LnRvQXJyYXkoKS5tYXAoZG9jID0+IGRvYy5kYXRhKCkpKVxuICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICBlcnJvcihlcnIpXG4gICAgICByZWplY3QoZXJyKVxuICAgIH0pKVxuICB9XG5cbiAgcmV0dXJuIGRyaXZlclxufVxuIl19