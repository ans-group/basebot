"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _awsSdk = require("aws-sdk");

var lex = new _awsSdk.LexRuntime({
  region: process.env.AWS_REGION });var _default =


function _default(logger) {
  if (!process.env.AWS_REGION || !process.env.LEX_BOT_NAME || !process.env.LEX_BOT_ALIAS) throw new Error('AWS_REGION, LEX_BOT_NAME and LEX_BOT_ALIAS must be set');
  var debug = logger('middleware:lex', 'debug');
  return {
    receive: receive,
    heard: heard };

  function receive(bot, message, next) {
    if (!message.text) {
      next();
      return;
    }

    if (message.is_echo || message.type === 'self_message' || message.alexa) {
      next();
      return;
    }
    debug("userId: ".concat(message.user));
    var params = {
      botAlias: process.env.LEX_BOT_ALIAS,
      botName: process.env.LEX_BOT_NAME,
      inputText: message.text,
      // FIXME - alexa provides a UID with > 200 characters - this will be massively truncated as a result and could even lead to unintentional session hijacking
      userId: message.user.substr(0, 100),
      requestAttributes: message.requestAttributes,
      sessionAttributes: message.sessionAttributes };

    if (message.text) {
      var request = lex.postText(params, function (err, data) {
        if (err) {
          next(err);
        } else {
          message.lex = {
            intent: data.intentName,
            slots: data.slots,
            session: data.sessionAttributes,
            response: data.message,
            dialogState: data.dialogState,
            slotToElicit: data.slotToElicit };

          debug('response received from Lex:', message.lex);
          if (data.intentName) {
            message.intent === data.intentName;
          }
          next();
        }
      });
    } else {
      next();
    }
  }

  function heard(bot, message, next) {
    console.log('----------------------');
    console.log(bot);
    console.log('----------------------');
    if (message.lex && message.lex.dialogState === 'Fulfilled' && message.lex.intentName !== null) {
      return bot.reply(message, message.lex.response);
    }
    console.log('****');
    next();
  }
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxleCIsIkxleFJ1bnRpbWUiLCJyZWdpb24iLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsImxvZ2dlciIsIkxFWF9CT1RfTkFNRSIsIkxFWF9CT1RfQUxJQVMiLCJFcnJvciIsImRlYnVnIiwicmVjZWl2ZSIsImhlYXJkIiwiYm90IiwibWVzc2FnZSIsIm5leHQiLCJ0ZXh0IiwiaXNfZWNobyIsInR5cGUiLCJhbGV4YSIsInVzZXIiLCJwYXJhbXMiLCJib3RBbGlhcyIsImJvdE5hbWUiLCJpbnB1dFRleHQiLCJ1c2VySWQiLCJzdWJzdHIiLCJyZXF1ZXN0QXR0cmlidXRlcyIsInNlc3Npb25BdHRyaWJ1dGVzIiwicmVxdWVzdCIsInBvc3RUZXh0IiwiZXJyIiwiZGF0YSIsImludGVudCIsImludGVudE5hbWUiLCJzbG90cyIsInNlc3Npb24iLCJyZXNwb25zZSIsImRpYWxvZ1N0YXRlIiwic2xvdFRvRWxpY2l0IiwiY29uc29sZSIsImxvZyIsInJlcGx5Il0sIm1hcHBpbmdzIjoidUdBQUE7O0FBRUEsSUFBTUEsR0FBRyxHQUFHLElBQUlDLGtCQUFKLENBQWU7QUFDekJDLEVBQUFBLE1BQU0sRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBREssRUFBZixDQUFaLEM7OztBQUllLGtCQUFDQyxNQUFELEVBQVk7QUFDekIsTUFBSSxDQUFDSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBYixJQUEyQixDQUFDRixPQUFPLENBQUNDLEdBQVIsQ0FBWUcsWUFBeEMsSUFBd0QsQ0FBQ0osT0FBTyxDQUFDQyxHQUFSLENBQVlJLGFBQXpFLEVBQXdGLE1BQU0sSUFBSUMsS0FBSixDQUFVLHdEQUFWLENBQU47QUFDeEYsTUFBTUMsS0FBSyxHQUFHSixNQUFNLENBQUMsZ0JBQUQsRUFBbUIsT0FBbkIsQ0FBcEI7QUFDQSxTQUFPO0FBQ0xLLElBQUFBLE9BQU8sRUFBUEEsT0FESztBQUVQQyxJQUFBQSxLQUFLLEVB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QUFBLElBQUk7QUFDTDtBQUNGLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMZXhSdW50aW1lIH0gZnJvbSAnYXdzLXNkaydcblxuY29uc3QgbGV4ID0gbmV3IExleFJ1bnRpbWUoe1xuICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT05cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IChsb2dnZXIpID0+IHtcbiAgaWYgKCFwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICFwcm9jZXNzLmVudi5MRVhfQk9UX05BTUUgfHwgIXByb2Nlc3MuZW52LkxFWF9CT1RfQUxJQVMpIHRocm93IG5ldyBFcnJvcignQVdTX1JFR0lPTiwgTEVYX0JPVF9OQU1FIGFuZCBMRVhfQk9UX0FMSUFTIG11c3QgYmUgc2V0JylcbiAgY29uc3QgZGVidWcgPSBsb2dnZXIoJ21pZGRsZXdhcmU6bGV4JywgJ2RlYnVnJylcbiAgcmV0dXJuIHtcbiAgICByZWNlaXZlLFxuICBoZWFyZH1cblxuICBmdW5jdGlvbiByZWNlaXZlIChib3QsIG1lc3NhZ2UsIG5leHQpIHtcbiAgICBpZiAoIW1lc3NhZ2UudGV4dCkge1xuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5pc19lY2hvIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3NlbGZfbWVzc2FnZScgfHwgbWVzc2FnZS5hbGV4YSkge1xuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZGVidWcoYHVzZXJJZDogJHttZXNzYWdlLnVzZXJ9YClcbiAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgYm90QWxpYXM6IHByb2Nlc3MuZW52LkxFWF9CT1RfQUxJQVMsXG4gICAgICBib3ROYW1lOiBwcm9jZXNzLmVudi5MRVhfQk9UX05BTUUsXG4gICAgICBpbnB1dFRleHQ6IG1lc3NhZ2UudGV4dCxcbiAgICAgIC8vIEZJWE1FIC0gYWxleGEgcHJvdmlkZXMgYSBVSUQgd2l0aCA+IDIwMCBjaGFyYWN0ZXJzIC0gdGhpcyB3aWxsIGJlIG1hc3NpdmVseSB0cnVuY2F0ZWQgYXMgYSByZXN1bHQgYW5kIGNvdWxkIGV2ZW4gbGVhZCB0byB1bmludGVudGlvbmFsIHNlc3Npb24gaGlqYWNraW5nXG4gICAgICB1c2VySWQ6IG1lc3NhZ2UudXNlci5zdWJzdHIoMCwgMTAwKSxcbiAgICAgIHJlcXVlc3RBdHRyaWJ1dGVzOiBtZXNzYWdlLnJlcXVlc3RBdHRyaWJ1dGVzLFxuICAgICAgc2Vzc2lvbkF0dHJpYnV0ZXM6IG1lc3NhZ2Uuc2Vzc2lvbkF0dHJpYnV0ZXNcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudGV4dCkge1xuICAgICAgdmFyIHJlcXVlc3QgPSBsZXgucG9zdFRleHQocGFyYW1zLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBuZXh0KGVycilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlLmxleCA9IHtcbiAgICAgICAgICAgIGludGVudDogZGF0YS5pbnRlbnROYW1lLFxuICAgICAgICAgICAgc2xvdHM6IGRhdGEuc2xvdHMsXG4gICAgICAgICAgICBzZXNzaW9uOiBkYXRhLnNlc3Npb25BdHRyaWJ1dGVzLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGRhdGEubWVzc2FnZSxcbiAgICAgICAgICAgIGRpYWxvZ1N0YXRlOiBkYXRhLmRpYWxvZ1N0YXRlLFxuICAgICAgICAgICAgc2xvdFRvRWxpY2l0OiBkYXRhLnNsb3RUb0VsaWNpdFxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1ZygncmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBMZXg6JywgbWVzc2FnZS5sZXgpXG4gICAgICAgICAgaWYgKGRhdGEuaW50ZW50TmFtZSkge1xuICAgICAgICAgICAgbWVzc2FnZS5pbnRlbnQgPT09IGRhdGEuaW50ZW50TmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGVhcmQgKGJvdCwgbWVzc2FnZSwgbmV4dCkge1xuICAgIGNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tJylcbiAgICBjb25zb2xlLmxvZyhib3QpXG4gICAgY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKVxuICAgIGlmIChtZXNzYWdlLmxleCAmJiBtZXNzYWdlLmxleC5kaWFsb2dTdGF0ZSA9PT0gJ0Z1bGZpbGxlZCcgJiYgbWVzc2FnZS5sZXguaW50ZW50TmFtZSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGJvdC5yZXBseShtZXNzYWdlLCBtZXNzYWdlLmxleC5yZXNwb25zZSlcbiAgICB9XG4gICAgY29uc29sZS5sb2coJyoqKionKVxuICAgIG5leHQoKVxuICB9XG59XG4iXX0=