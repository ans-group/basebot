"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _awsSdk = require("aws-sdk");

var lex = new _awsSdk.LexRuntime({
  region: process.env.AWS_REGION });var _default =


function _default(logger) {
  var error = logger('middleware:lex', 'error');
  var debug = logger('middleware:lex', 'debug');

  if (!process.env.AWS_REGION || !process.env.BOT_NAME) {
    error('AWS_REGION and BOT_NAME must be set');
  }

  return {
    receive: receive,
    heard: heard };


  function receive(bot, message, next) {
    if (!message.text) {
      next();
      return;
    }

    if (message.is_echo || message.type === 'self_message' || message.alexa) {
      next();
      return;
    }
    debug("userId: ".concat(message.user));
    var params = {
      botAlias: process.env.BOT_NAME || 'Basebot',
      botName: process.env.BOT_NAME || 'Basebot',
      inputText: message.text,
      // FIXME - alexa provides a UID with > 200 characters - this will be massively truncated as a result and could even lead to unintentional session hijacking
      userId: message.user && message.user.substr(0, 100),
      requestAttributes: message.requestAttributes,
      sessionAttributes: message.sessionAttributes };

    if (message.text) {
      var request = lex.postText(params, function (err, data) {
        if (err) {
          next(err);
        } else {
          message.lex = {
            intent: data.intentName,
            slots: data.slots,
            session: data.sessionAttributes,
            response: data.message,
            dialogState: data.dialogState,
            slotToElicit: data.slotToElicit };

          debug('response received from Lex:', message.lex);
          if (data.intentName) {
            message.intent === data.intentName;
          }
          next();
        }
      });
    } else {
      next();
    }
  }

  function heard(bot, message, next) {
    if (message.lex && message.lex.dialogState === 'Fulfilled' && message.lex.intentName !== null) {
      return bot.reply(message, message.lex.response);
    }
    next();
  }
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxleCIsIkxleFJ1bnRpbWUiLCJyZWdpb24iLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsImxvZ2dlciIsImVycm9yIiwiZGVidWciLCJCT1RfTkFNRSIsInJlY2VpdmUiLCJoZWFyZCIsImJvdCIsIm1lc3NhZ2UiLCJuZXh0IiwidGV4dCIsImlzX2VjaG8iLCJ0eXBlIiwiYWxleGEiLCJ1c2VyIiwicGFyYW1zIiwiYm90QWxpYXMiLCJib3ROYW1lIiwiaW5wdXRUZXh0IiwidXNlcklkIiwic3Vic3RyIiwicmVxdWVzdEF0dHJpYnV0ZXMiLCJzZXNzaW9uQXR0cmlidXRlcyIsInJlcXVlc3QiLCJwb3N0VGV4dCIsImVyciIsImRhdGEiLCJpbnRlbnQiLCJpbnRlbnROYW1lIiwic2xvdHMiLCJzZXNzaW9uIiwicmVzcG9uc2UiLCJkaWFsb2dTdGF0ZSIsInNsb3RUb0VsaWNpdCIsInJlcGx5Il0sIm1hcHBpbmdzIjoidUdBQUE7O0FBRUEsSUFBTUEsR0FBRyxHQUFHLElBQUlDLGtCQUFKLENBQWU7QUFDekJDLEVBQUFBLE1BQU0sRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBREssRUFBZixDQUFaLEM7OztBQUllLGtCQUFDQyxNQUFELEVBQVk7QUFDekIsTUFBTUMsS0FBSyxHQUFHRCxNQUFNLENBQUMsZ0JBQUQsRUFBbUIsT0FBbkIsQ0FBcEI7QUFDQSxNQUFNRSxLQUFLLEdBQUdGLE1BQU0sQ0FBQyxnQkFBRCxFQUFtQixPQUFuQixDQUFwQjs7QUFFQSxNQUFJLENBQUNILE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxVQUFiLElBQTJCLENBQUNGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxRQUE1QyxFQUFzRDtBQUNwREYsSUFBQUEsS0FBSyxDQUFDLHFDQUFELENBQUw7QUFDRDs7QUFFRCxTQUFPO0FBQ0xHLElBQUFBLE9BQU8sRUFBUEEsT0FESztBQUVMQyxJQUFBQSxLQUFLLEVBQUxBLEtBRkssRUFBUDs7O0FBS0EsV0FBU0QsT0FBVCxDQUFpQkUsR0FBakIsRUFBc0JDLE9BQXRCLEVBQStCQyxJQUEvQixFQUFxQztBQUNuQyxRQUFJLENBQUNELE9BQU8sQ0FBQ0UsSUFBYixFQUFtQjtBQUNqQkQsTUFBQUEsSUFBSTtBQUNKO0FBQ0Q7O0FBRUQsUUFBSUQsT0FBTyxDQUFDRyxPQUFSLElBQW1CSCxPQUFPLENBQUNJLElBQVIsS0FBaUIsY0FBcEMsSUFBc0RKLE9BQU8sQ0FBQ0ssS0FBbEUsRUFBeUU7QUFDdkVKLE1BQUFBLElBQUk7QUFDSjtBQUNEO0FBQ0ROLElBQUFBLEtBQUssbUJBQVlLLE9BQU8sQ0FBQ00sSUFBcEIsRUFBTDtBQUNBLFFBQUlDLE1BQU0sR0FBRztBQUNYQyxNQUFBQSxRQUFRLEVBQUVsQixPQUFPLENBQUNDLEdBQVIsQ0FBWUssUUFBWixJQUF3QixTQUR2QjtBQUVYYSxNQUFBQSxPQUFPLEVBQUVuQixPQUFPLENBQUNDLEdBQVIsQ0FBWUssUUFBWixJQUF3QixTQUZ0QjtBQUdYYyxNQUFBQSxTQUFTLEVBQUVWLE9BQU8sQ0FBQ0UsSUFIUjtBQUlYO0FBQ0FTLE1BQUFBLE1BQU0sRUFBRVgsT0FBTyxDQUFDTSxJQUFSLElBQWdCTixPQUFPLENBQUNNLElBQVIsQ0FBYU0sTUFBYixDQUFvQixDQUFwQixFQUF1QixHQUF2QixDQUxiO0FBTVhDLE1BQUFBLGlCQUFpQixFQUFFYixPQUFPLENBQUNhLGlCQU5oQjtBQU9YQyxNQUFBQSxpQkFBaUIsRUFBRWQsT0FBTyxDQUFDYyxpQkFQaEIsRUFBYjs7QUFTQSxRQUFJZCxPQUFPLENBQUNFLElBQVosRUFBa0I7QUFDaEIsVUFBSWEsT0FBTyxHQUFHNUIsR0FBRyxDQUFDNkIsUUFBSixDQUFhVCxNQUFiLEVBQXFCLFVBQVVVLEdBQVYsRUFBZUMsSUFBZixFQUFxQjtBQUN0RCxZQUFJRCxHQUFKLEVBQVM7QUFDUGhCLFVBQUFBLElBQUksQ0FBQ2dCLEdBQUQsQ0FBSjtBQUNELFNBRkQsTUFFTztBQUNMakIsVUFBQUEsT0FBTyxDQUFDYixHQUFSLEdBQWM7QUFDWmdDLFlBQUFBLE1BQU0sRUFBRUQsSUFBSSxDQUFDRSxVQUREO0FBRVpDLFlBQUFBLEtBQUssRUFBRUgsSUFBSSxDQUFDRyxLQUZBO0FBR1pDLFlBQUFBLE9BQU8sRUFBRUosSUFBSSxDQUFDSixpQkFIRjtBQUlaUyxZQUFBQSxRQUFRLEVBQUVMLElBQUksQ0FBQ2xCLE9BSkg7QUFLWndCLFlBQUFBLFdBQVcsRUFBRU4sSUFBSSxDQUFDTSxXQUxOO0FBTVpDLFlBQUFBLFlBQVksRUFBRVAsSUFBSSxDQUFDTyxZQU5QLEVBQWQ7O0FBUUE5QixVQUFBQSxLQUFLLENBQUMsNkJBQUQsRUFBZ0NLLE9BQU8sQ0FBQ2IsR0FBeEMsQ0FBTDtBQUNBLGNBQUkrQixJQUFJLENBQUNFLFVBQVQsRUFBcUI7QUFDbkJwQixZQUFBQSxPQUFPLENBQUNtQixNQUFSLEtBQW1CRCxJQUFJLENBQUNFLFVBQXhCO0FBQ0Q7QUFDRG5CLFVBQUFBLElBQUk7QUFDTDtBQUNGLE9BbEJhLENBQWQ7QUFtQkQsS0FwQkQsTUFvQk87QUFDTEEsTUFBQUEsSUFBSTtBQUNMO0FBQ0Y7O0FBRUQsV0FBU0gsS0FBVCxDQUFlQyxHQUFmLEVBQW9CQyxPQUFwQixFQUE2QkMsSUFBN0IsRUFBbUM7QUFDakMsUUFBSUQsT0FBTyxDQUFDYixHQUFSLElBQWVhLE9BQU8sQ0FBQ2IsR0FBUixDQUFZcUMsV0FBWixLQUE0QixXQUEzQyxJQUEwRHhCLE9BQU8sQ0FBQ2IsR0FBUixDQUFZaUMsVUFBWixLQUEyQixJQUF6RixFQUErRjtBQUM3RixhQUFPckIsR0FBRyxDQUFDMkIsS0FBSixDQUFVMUIsT0FBVixFQUFtQkEsT0FBTyxDQUFDYixHQUFSLENBQVlvQyxRQUEvQixDQUFQO0FBQ0Q7QUFDRHRCLElBQUFBLElBQUk7QUFDTDtBQUNGLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMZXhSdW50aW1lIH0gZnJvbSAnYXdzLXNkaydcblxuY29uc3QgbGV4ID0gbmV3IExleFJ1bnRpbWUoe1xuICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT05cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IChsb2dnZXIpID0+IHtcbiAgY29uc3QgZXJyb3IgPSBsb2dnZXIoJ21pZGRsZXdhcmU6bGV4JywgJ2Vycm9yJylcbiAgY29uc3QgZGVidWcgPSBsb2dnZXIoJ21pZGRsZXdhcmU6bGV4JywgJ2RlYnVnJylcblxuICBpZiAoIXByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgIXByb2Nlc3MuZW52LkJPVF9OQU1FKSB7XG4gICAgZXJyb3IoJ0FXU19SRUdJT04gYW5kIEJPVF9OQU1FIG11c3QgYmUgc2V0JylcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcmVjZWl2ZSxcbiAgICBoZWFyZFxuICB9XG5cbiAgZnVuY3Rpb24gcmVjZWl2ZShib3QsIG1lc3NhZ2UsIG5leHQpIHtcbiAgICBpZiAoIW1lc3NhZ2UudGV4dCkge1xuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5pc19lY2hvIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3NlbGZfbWVzc2FnZScgfHwgbWVzc2FnZS5hbGV4YSkge1xuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZGVidWcoYHVzZXJJZDogJHttZXNzYWdlLnVzZXJ9YClcbiAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgYm90QWxpYXM6IHByb2Nlc3MuZW52LkJPVF9OQU1FIHx8ICdCYXNlYm90JyxcbiAgICAgIGJvdE5hbWU6IHByb2Nlc3MuZW52LkJPVF9OQU1FIHx8ICdCYXNlYm90JyxcbiAgICAgIGlucHV0VGV4dDogbWVzc2FnZS50ZXh0LFxuICAgICAgLy8gRklYTUUgLSBhbGV4YSBwcm92aWRlcyBhIFVJRCB3aXRoID4gMjAwIGNoYXJhY3RlcnMgLSB0aGlzIHdpbGwgYmUgbWFzc2l2ZWx5IHRydW5jYXRlZCBhcyBhIHJlc3VsdCBhbmQgY291bGQgZXZlbiBsZWFkIHRvIHVuaW50ZW50aW9uYWwgc2Vzc2lvbiBoaWphY2tpbmdcbiAgICAgIHVzZXJJZDogbWVzc2FnZS51c2VyICYmIG1lc3NhZ2UudXNlci5zdWJzdHIoMCwgMTAwKSxcbiAgICAgIHJlcXVlc3RBdHRyaWJ1dGVzOiBtZXNzYWdlLnJlcXVlc3RBdHRyaWJ1dGVzLFxuICAgICAgc2Vzc2lvbkF0dHJpYnV0ZXM6IG1lc3NhZ2Uuc2Vzc2lvbkF0dHJpYnV0ZXNcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudGV4dCkge1xuICAgICAgdmFyIHJlcXVlc3QgPSBsZXgucG9zdFRleHQocGFyYW1zLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBuZXh0KGVycilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlLmxleCA9IHtcbiAgICAgICAgICAgIGludGVudDogZGF0YS5pbnRlbnROYW1lLFxuICAgICAgICAgICAgc2xvdHM6IGRhdGEuc2xvdHMsXG4gICAgICAgICAgICBzZXNzaW9uOiBkYXRhLnNlc3Npb25BdHRyaWJ1dGVzLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGRhdGEubWVzc2FnZSxcbiAgICAgICAgICAgIGRpYWxvZ1N0YXRlOiBkYXRhLmRpYWxvZ1N0YXRlLFxuICAgICAgICAgICAgc2xvdFRvRWxpY2l0OiBkYXRhLnNsb3RUb0VsaWNpdFxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1ZygncmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBMZXg6JywgbWVzc2FnZS5sZXgpXG4gICAgICAgICAgaWYgKGRhdGEuaW50ZW50TmFtZSkge1xuICAgICAgICAgICAgbWVzc2FnZS5pbnRlbnQgPT09IGRhdGEuaW50ZW50TmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGVhcmQoYm90LCBtZXNzYWdlLCBuZXh0KSB7XG4gICAgaWYgKG1lc3NhZ2UubGV4ICYmIG1lc3NhZ2UubGV4LmRpYWxvZ1N0YXRlID09PSAnRnVsZmlsbGVkJyAmJiBtZXNzYWdlLmxleC5pbnRlbnROYW1lICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYm90LnJlcGx5KG1lc3NhZ2UsIG1lc3NhZ2UubGV4LnJlc3BvbnNlKVxuICAgIH1cbiAgICBuZXh0KClcbiAgfVxufVxuIl19