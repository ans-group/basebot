"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _awsSdk = require("aws-sdk");

var lex = new _awsSdk.LexRuntime({
  region: process.env.AWS_REGION });var _default =


function _default(logger) {
  if (!process.env.AWS_REGION || !process.env.LEX_BOT_NAME || !process.env.LEX_BOT_ALIAS) throw new Error('AWS_REGION, LEX_BOT_NAME and LEX_BOT_ALIAS must be set');
  return {
    receive: receive,
    heard: heard };

  function receive(bot, message, next) {
    if (!message.text) {
      next();
      return;
    }

    if (message.is_echo || message.type === 'self_message') {
      next();
      return;
    }
    var params = {
      botAlias: process.env.LUIS_BOT_ALIAS,
      botName: process.env.LUIS_BOT_NAME,
      inputText: message.text,
      userId: message.user,
      requestAttributes: message.requestAttributes,
      sessionAttributes: message.sessionAttributes };

    if (message.text) {
      var request = lex.postText(params, function (err, data) {
        if (err) {
          next(err);
        } else {
          message.lex = {
            intent: data.intentName,
            slots: data.slots,
            session: data.sessionAttributes,
            response: data.message,
            dialogState: data.dialogState,
            slotToElicit: data.slotToElicit };

          debug('response received from Lex:', message.lex);
          if (data.intentName) {
            message.intent === intentName;
          }
          next();
        }
      });
    } else {
      next();
    }
  }

  function heard(bot, message, next) {
    if (message.lex && message.lex.dialogState === 'Fulfilled' && message.lex.intentName !== null) {
      return bot.reply(message, message.lex.message);
    }
    next();
  }
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxleCIsIkxleFJ1bnRpbWUiLCJyZWdpb24iLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsImxvZ2dlciIsIkxFWF9CT1RfTkFNRSIsIkxFWF9CT1RfQUxJQVMiLCJFcnJvciIsInJlY2VpdmUiLCJoZWFyZCIsImJvdCIsIm1lc3NhZ2UiLCJuZXh0IiwidGV4dCIsImlzX2VjaG8iLCJ0eXBlIiwicGFyYW1zIiwiYm90QWxpYXMiLCJMVUlTX0JPVF9BTElBUyIsImJvdE5hbWUiLCJMVUlTX0JPVF9OQU1FIiwiaW5wdXRUZXh0IiwidXNlcklkIiwidXNlciIsInJlcXVlc3RBdHRyaWJ1dGVzIiwic2Vzc2lvbkF0dHJpYnV0ZXMiLCJyZXF1ZXN0IiwicG9zdFRleHQiLCJlcnIiLCJkYXRhIiwiaW50ZW50IiwiaW50ZW50TmFtZSIsInNsb3RzIiwic2Vzc2lvbiIsInJlc3BvbnNlIiwiZGlhbG9nU3RhdGUiLCJzbG90VG9FbGljaXQiLCJkZWJ1ZyIsInJlcGx5Il0sIm1hcHBpbmdzIjoidUdBQUE7O0FBRUEsSUFBTUEsR0FBRyxHQUFHLElBQUlDLGtCQUFKLENBQWU7QUFDekJDLEVBQUFBLE1BQU0sRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBREssRUFBZixDQUFaLEM7OztBQUllLGtCQUFDQyxNQUFELEVBQVk7QUFDekIsTUFBSSxDQUFDSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBYixJQUEyQixDQUFDRixPQUFPLENBQUNDLEdBQVIsQ0FBWUcsWUFBeEMsSUFBd0QsQ0FBQ0osT0FBTyxDQUFDQyxHQUFSLENBQVlJLGFBQXpFLEVBQXdGLE1BQU0sSUFBSUMsS0FBSixDQUFVLHdEQUFWLENBQU47QUFDeEYsU0FBTztBQUNMQyxJQUFBQSxPQUFPLEVBQVBBLE9BREs7QUFFUEMsSUFBQUEsS0FBSyxFQUFMQSxLQUZPLEVBQVA7O0FBSUEsV0FBU0QsT0FBVCxDQUFrQkUsR0FBbEIsRUFBdUJDLE9BQXZCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUNwQyxRQUFJLENBQUNELE9BQU8sQ0FBQ0UsSUFBYixFQUFtQjtBQUNqQkQsTUFBQUEsSUFBSTtBQUNKO0FBQ0Q7O0FBRUQsUUFBSUQsT0FBTyxDQUFDRyxPQUFSLElBQW1CSCxPQUFPLENBQUNJLElBQVIsS0FBaUIsY0FBeEMsRUFBd0Q7QUFDdERILE1BQUFBLElBQUk7QUFDSjtBQUNEO0FBQ0QsUUFBSUksTUFBTSxHQUFHO0FBQ1hDLE1BQUFBLFFBQVEsRUFBRWhCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZZ0IsY0FEWDtBQUVYQyxNQUFBQSxPQUFPLEVBQUVsQixPQUFPLENBQUNDLEdBQVIsQ0FBWWtCLGFBRlY7QUFHWEMsTUFBQUEsU0FBUyxFQUFFVixPQUFPLENBQUNFLElBSFI7QUFJWFMsTUFBQUEsTUFBTSxFQUFFWCxPQUFPLENBQUNZLElBSkw7QUFLWEMsTUFBQUEsaUJBQWlCLEVBQUViLE9BQU8sQ0FBQ2EsaUJBTGhCO0FBTVhDLE1BQUFBLGlCQUFpQixFQUFFZCxPQUFPLENBQUNjLGlCQU5oQixFQUFiOztBQVFBLFFBQUlkLE9BQU8sQ0FBQ0UsSUFBWixFQUFrQjtBQUNoQixVQUFJYSxPQUFPLEdBQUc1QixHQUFHLENBQUM2QixRQUFKLENBQWFYLE1BQWIsRUFBcUIsVUFBVVksR0FBVixFQUFlQyxJQUFmLEVBQXFCO0FBQ3RELFlBQUlELEdBQUosRUFBUztBQUNQaEIsVUFBQUEsSUFBSSxDQUFDZ0IsR0FBRCxDQUFKO0FBQ0QsU0FGRCxNQUVPO0FBQ0xqQixVQUFBQSxPQUFPLENBQUNiLEdBQVIsR0FBYztBQUNaZ0MsWUFBQUEsTUFBTSxFQUFFRCxJQUFJLENBQUNFLFVBREQ7QUFFWkMsWUFBQUEsS0FBSyxFQUFFSCxJQUFJLENBQUNHLEtBRkE7QUFHWkMsWUFBQUEsT0FBTyxFQUFFSixJQUFJLENBQUNKLGlCQUhGO0FBSVpTLFlBQUFBLFFBQVEsRUFBRUwsSUFBSSxDQUFDbEIsT0FKSDtBQUtad0IsWUFBQUEsV0FBVyxFQUFFTixJQUFJLENBQUNNLFdBTE47QUFNWkMsWUFBQUEsWUFBWSxFQUFFUCxJQUFJLENBQUNPLFlBTlAsRUFBZDs7QUFRQUMsVUFBQUEsS0FBSyxDQUFDLDZCQUFELEVBQWdDMUIsT0FBTyxDQUFDYixHQUF4QyxDQUFMO0FBQ0EsY0FBSStCLElBQUksQ0FBQ0UsVUFBVCxFQUFxQjtBQUNuQnBCLFlBQUFBLE9BQU8sQ0FBQ21CLE1BQVIsS0FBbUJDLFVBQW5CO0FBQ0Q7QUFDRG5CLFVBQUFBLElBQUk7QUFDTDtBQUNGLE9BbEJhLENBQWQ7QUFtQkQsS0FwQkQsTUFvQk87QUFDTEEsTUFBQUEsSUFBSTtBQUNMO0FBQ0Y7O0FBRUQsV0FBU0gsS0FBVCxDQUFnQkMsR0FBaEIsRUFBcUJDLE9BQXJCLEVBQThCQyxJQUE5QixFQUFvQztBQUNsQyxRQUFJRCxPQUFPLENBQUNiLEdBQVIsSUFBZWEsT0FBTyxDQUFDYixHQUFSLENBQVlxQyxXQUFaLEtBQTRCLFdBQTNDLElBQTBEeEIsT0FBTyxDQUFDYixHQUFSLENBQVlpQyxVQUFaLEtBQTJCLElBQXpGLEVBQStGO0FBQzdGLGFBQU9yQixHQUFHLENBQUM0QixLQUFKLENBQVUzQixPQUFWLEVBQW1CQSxPQUFPLENBQUNiLEdBQVIsQ0FBWWEsT0FBL0IsQ0FBUDtBQUNEO0FBQ0RDLElBQUFBLElBQUk7QUFDTDtBQUNGLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMZXhSdW50aW1lIH0gZnJvbSAnYXdzLXNkaydcblxuY29uc3QgbGV4ID0gbmV3IExleFJ1bnRpbWUoe1xuICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT05cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IChsb2dnZXIpID0+IHtcbiAgaWYgKCFwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICFwcm9jZXNzLmVudi5MRVhfQk9UX05BTUUgfHwgIXByb2Nlc3MuZW52LkxFWF9CT1RfQUxJQVMpIHRocm93IG5ldyBFcnJvcignQVdTX1JFR0lPTiwgTEVYX0JPVF9OQU1FIGFuZCBMRVhfQk9UX0FMSUFTIG11c3QgYmUgc2V0JylcbiAgcmV0dXJuIHtcbiAgICByZWNlaXZlLFxuICBoZWFyZH1cblxuICBmdW5jdGlvbiByZWNlaXZlIChib3QsIG1lc3NhZ2UsIG5leHQpIHtcbiAgICBpZiAoIW1lc3NhZ2UudGV4dCkge1xuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5pc19lY2hvIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3NlbGZfbWVzc2FnZScpIHtcbiAgICAgIG5leHQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICBib3RBbGlhczogcHJvY2Vzcy5lbnYuTFVJU19CT1RfQUxJQVMsXG4gICAgICBib3ROYW1lOiBwcm9jZXNzLmVudi5MVUlTX0JPVF9OQU1FLFxuICAgICAgaW5wdXRUZXh0OiBtZXNzYWdlLnRleHQsXG4gICAgICB1c2VySWQ6IG1lc3NhZ2UudXNlcixcbiAgICAgIHJlcXVlc3RBdHRyaWJ1dGVzOiBtZXNzYWdlLnJlcXVlc3RBdHRyaWJ1dGVzLFxuICAgICAgc2Vzc2lvbkF0dHJpYnV0ZXM6IG1lc3NhZ2Uuc2Vzc2lvbkF0dHJpYnV0ZXNcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudGV4dCkge1xuICAgICAgdmFyIHJlcXVlc3QgPSBsZXgucG9zdFRleHQocGFyYW1zLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBuZXh0KGVycilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlLmxleCA9IHtcbiAgICAgICAgICAgIGludGVudDogZGF0YS5pbnRlbnROYW1lLFxuICAgICAgICAgICAgc2xvdHM6IGRhdGEuc2xvdHMsXG4gICAgICAgICAgICBzZXNzaW9uOiBkYXRhLnNlc3Npb25BdHRyaWJ1dGVzLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGRhdGEubWVzc2FnZSxcbiAgICAgICAgICAgIGRpYWxvZ1N0YXRlOiBkYXRhLmRpYWxvZ1N0YXRlLFxuICAgICAgICAgICAgc2xvdFRvRWxpY2l0OiBkYXRhLnNsb3RUb0VsaWNpdFxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1ZygncmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBMZXg6JywgbWVzc2FnZS5sZXgpXG4gICAgICAgICAgaWYgKGRhdGEuaW50ZW50TmFtZSkge1xuICAgICAgICAgICAgbWVzc2FnZS5pbnRlbnQgPT09IGludGVudE5hbWVcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dCgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHQoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYXJkIChib3QsIG1lc3NhZ2UsIG5leHQpIHtcbiAgICBpZiAobWVzc2FnZS5sZXggJiYgbWVzc2FnZS5sZXguZGlhbG9nU3RhdGUgPT09ICdGdWxmaWxsZWQnICYmIG1lc3NhZ2UubGV4LmludGVudE5hbWUgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBib3QucmVwbHkobWVzc2FnZSwgbWVzc2FnZS5sZXgubWVzc2FnZSlcbiAgICB9XG4gICAgbmV4dCgpXG4gIH1cbn1cbiJdfQ==