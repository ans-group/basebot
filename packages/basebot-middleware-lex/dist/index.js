"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _awsSdk = require("aws-sdk");

var lex = new _awsSdk.LexRuntime({
  region: process.env.AWS_REGION });var _default =


function _default(logger) {
  if (!process.env.AWS_REGION || !process.env.LEX_BOT_NAME || !process.env.LEX_BOT_ALIAS) throw new Error('AWS_REGION, LEX_BOT_NAME and LEX_BOT_ALIAS must be set');
  var debug = logger('middleware:lex', 'debug');
  return {
    receive: receive,
    heard: heard };

  function receive(bot, message, next) {
    if (!message.text) {
      next();
      return;
    }

    if (message.is_echo || message.type === 'self_message') {
      next();
      return;
    }
    var params = {
      botAlias: process.env.LEX_BOT_ALIAS,
      botName: process.env.LEX_BOT_NAME,
      inputText: message.text,
      userId: message.user,
      requestAttributes: message.requestAttributes,
      sessionAttributes: message.sessionAttributes };

    if (message.text) {
      var request = lex.postText(params, function (err, data) {
        if (err) {
          next(err);
        } else {
          message.lex = {
            intent: data.intentName,
            slots: data.slots,
            session: data.sessionAttributes,
            response: data.message,
            dialogState: data.dialogState,
            slotToElicit: data.slotToElicit };

          debug('response received from Lex:', message.lex);
          if (data.intentName) {
            message.intent === data.intentName;
          }
          next();
        }
      });
    } else {
      next();
    }
  }

  function heard(bot, message, next) {
    if (message.lex && message.lex.dialogState === 'Fulfilled' && message.lex.intentName !== null) {
      return bot.reply(message, message.lex.message);
    }
    next();
  }
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxleCIsIkxleFJ1bnRpbWUiLCJyZWdpb24iLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsImxvZ2dlciIsIkxFWF9CT1RfTkFNRSIsIkxFWF9CT1RfQUxJQVMiLCJFcnJvciIsImRlYnVnIiwicmVjZWl2ZSIsImhlYXJkIiwiYm90IiwibWVzc2FnZSIsIm5leHQiLCJ0ZXh0IiwiaXNfZWNobyIsInR5cGUiLCJwYXJhbXMiLCJib3RBbGlhcyIsImJvdE5hbWUiLCJpbnB1dFRleHQiLCJ1c2VySWQiLCJ1c2VyIiwicmVxdWVzdEF0dHJpYnV0ZXMiLCJzZXNzaW9uQXR0cmlidXRlcyIsInJlcXVlc3QiLCJwb3N0VGV4dCIsImVyciIsImRhdGEiLCJpbnRlbnQiLCJpbnRlbnROYW1lIiwic2xvdHMiLCJzZXNzaW9uIiwicmVzcG9uc2UiLCJkaWFsb2dTdGF0ZSIsInNsb3RUb0VsaWNpdCIsInJlcGx5Il0sIm1hcHBpbmdzIjoidUdBQUE7O0FBRUEsSUFBTUEsR0FBRyxHQUFHLElBQUlDLGtCQUFKLENBQWU7QUFDekJDLEVBQUFBLE1BQU0sRUFBRUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBREssRUFBZixDQUFaLEM7OztBQUllLGtCQUFDQyxNQUFELEVBQVk7QUFDekIsTUFBSSxDQUFDSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBYixJQUEyQixDQUFDRixPQUFPLENBQUNDLEdBQVIsQ0FBWUcsWUFBeEMsSUFBd0QsQ0FBQ0osT0FBTyxDQUFDQyxHQUFSLENBQVlJLGFBQXpFLEVBQXdGLE1BQU0sSUFBSUMsS0FBSixDQUFVLHdEQUFWLENBQU47QUFDeEYsTUFBTUMsS0FBSyxHQUFHSixNQUFNLENBQUMsZ0JBQUQsRUFBbUIsT0FBbkIsQ0FBcEI7QUFDQSxTQUFPO0FBQ0xLLElBQUFBLE9BQU8sRUFBUEEsT0FESztBQUVQQyxJQUFBQSxLQUFLLEVBQUxBLEtBRk8sRUFBUDs7QUFJQSxXQUFTRCxPQUFULENBQWtCRSxHQUFsQixFQUF1QkMsT0FBdkIsRUFBZ0NDLElBQWhDLEVBQXNDO0FBQ3BDLFFBQUksQ0FBQ0QsT0FBTyxDQUFDRSxJQUFiLEVBQW1CO0FBQ2pCRCxNQUFBQSxJQUFJO0FBQ0o7QUFDRDs7QUFFRCxRQUFJRCxPQUFPLENBQUNHLE9BQVIsSUFBbUJILE9BQU8sQ0FBQ0ksSUFBUixLQUFpQixjQUF4QyxFQUF3RDtBQUN0REgsTUFBQUEsSUFBSTtBQUNKO0FBQ0Q7QUFDRCxRQUFJSSxNQUFNLEdBQUc7QUFDWEMsTUFBQUEsUUFBUSxFQUFFakIsT0FBTyxDQUFDQyxHQUFSLENBQVlJLGFBRFg7QUFFWGEsTUFBQUEsT0FBTyxFQUFFbEIsT0FBTyxDQUFDQyxHQUFSLENBQVlHLFlBRlY7QUFHWGUsTUFBQUEsU0FBUyxFQUFFUixPQUFPLENBQUNFLElBSFI7QUFJWE8sTUFBQUEsTUFBTSxFQUFFVCxPQUFPLENBQUNVLElBSkw7QUFLWEMsTUFBQUEsaUJBQWlCLEVBQUVYLE9BQU8sQ0FBQ1csaUJBTGhCO0FBTVhDLE1BQUFBLGlCQUFpQixFQUFFWixPQUFPLENBQUNZLGlCQU5oQixFQUFiOztBQVFBLFFBQUlaLE9BQU8sQ0FBQ0UsSUFBWixFQUFrQjtBQUNoQixVQUFJVyxPQUFPLEdBQUczQixHQUFHLENBQUM0QixRQUFKLENBQWFULE1BQWIsRUFBcUIsVUFBVVUsR0FBVixFQUFlQyxJQUFmLEVBQXFCO0FBQ3RELFlBQUlELEdBQUosRUFBUztBQUNQZCxVQUFBQSxJQUFJLENBQUNjLEdBQUQsQ0FBSjtBQUNELFNBRkQsTUFFTztBQUNMZixVQUFBQSxPQUFPLENBQUNkLEdBQVIsR0FBYztBQUNaK0IsWUFBQUEsTUFBTSxFQUFFRCxJQUFJLENBQUNFLFVBREQ7QUFFWkMsWUFBQUEsS0FBSyxFQUFFSCxJQUFJLENBQUNHLEtBRkE7QUFHWkMsWUFBQUEsT0FBTyxFQUFFSixJQUFJLENBQUNKLGlCQUhGO0FBSVpTLFlBQUFBLFFBQVEsRUFBRUwsSUFBSSxDQUFDaEIsT0FKSDtBQUtac0IsWUFBQUEsV0FBVyxFQUFFTixJQUFJLENBQUNNLFdBTE47QUFNWkMsWUFBQUEsWUFBWSxFQUFFUCxJQUFJLENBQUNPLFlBTlAsRUFBZDs7QUFRQTNCLFVBQUFBLEtBQUssQ0FBQyw2QkFBRCxFQUFnQ0ksT0FBTyxDQUFDZCxHQUF4QyxDQUFMO0FBQ0EsY0FBSThCLElBQUksQ0FBQ0UsVUFBVCxFQUFxQjtBQUNuQmxCLFlBQUFBLE9BQU8sQ0FBQ2lCLE1BQVIsS0FBbUJELElBQUksQ0FBQ0UsVUFBeEI7QUFDRDtBQUNEakIsVUFBQUEsSUFBSTtBQUNMO0FBQ0YsT0FsQmEsQ0FBZDtBQW1CRCxLQXBCRCxNQW9CTztBQUNMQSxNQUFBQSxJQUFJO0FBQ0w7QUFDRjs7QUFFRCxXQUFTSCxLQUFULENBQWdCQyxHQUFoQixFQUFxQkMsT0FBckIsRUFBOEJDLElBQTlCLEVBQW9DO0FBQ2xDLFFBQUlELE9BQU8sQ0FBQ2QsR0FBUixJQUFlYyxPQUFPLENBQUNkLEdBQVIsQ0FBWW9DLFdBQVosS0FBNEIsV0FBM0MsSUFBMER0QixPQUFPLENBQUNkLEdBQVIsQ0FBWWdDLFVBQVosS0FBMkIsSUFBekYsRUFBK0Y7QUFDN0YsYUFBT25CLEdBQUcsQ0FBQ3lCLEtBQUosQ0FBVXhCLE9BQVYsRUFBbUJBLE9BQU8sQ0FBQ2QsR0FBUixDQUFZYyxPQUEvQixDQUFQO0FBQ0Q7QUFDREMsSUFBQUEsSUFBSTtBQUNMO0FBQ0YsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExleFJ1bnRpbWUgfSBmcm9tICdhd3Mtc2RrJ1xuXG5jb25zdCBsZXggPSBuZXcgTGV4UnVudGltZSh7XG4gIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTlxufSlcblxuZXhwb3J0IGRlZmF1bHQgKGxvZ2dlcikgPT4ge1xuICBpZiAoIXByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgIXByb2Nlc3MuZW52LkxFWF9CT1RfTkFNRSB8fCAhcHJvY2Vzcy5lbnYuTEVYX0JPVF9BTElBUykgdGhyb3cgbmV3IEVycm9yKCdBV1NfUkVHSU9OLCBMRVhfQk9UX05BTUUgYW5kIExFWF9CT1RfQUxJQVMgbXVzdCBiZSBzZXQnKVxuICBjb25zdCBkZWJ1ZyA9IGxvZ2dlcignbWlkZGxld2FyZTpsZXgnLCAnZGVidWcnKVxuICByZXR1cm4ge1xuICAgIHJlY2VpdmUsXG4gIGhlYXJkfVxuXG4gIGZ1bmN0aW9uIHJlY2VpdmUgKGJvdCwgbWVzc2FnZSwgbmV4dCkge1xuICAgIGlmICghbWVzc2FnZS50ZXh0KSB7XG4gICAgICBuZXh0KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChtZXNzYWdlLmlzX2VjaG8gfHwgbWVzc2FnZS50eXBlID09PSAnc2VsZl9tZXNzYWdlJykge1xuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgIGJvdEFsaWFzOiBwcm9jZXNzLmVudi5MRVhfQk9UX0FMSUFTLFxuICAgICAgYm90TmFtZTogcHJvY2Vzcy5lbnYuTEVYX0JPVF9OQU1FLFxuICAgICAgaW5wdXRUZXh0OiBtZXNzYWdlLnRleHQsXG4gICAgICB1c2VySWQ6IG1lc3NhZ2UudXNlcixcbiAgICAgIHJlcXVlc3RBdHRyaWJ1dGVzOiBtZXNzYWdlLnJlcXVlc3RBdHRyaWJ1dGVzLFxuICAgICAgc2Vzc2lvbkF0dHJpYnV0ZXM6IG1lc3NhZ2Uuc2Vzc2lvbkF0dHJpYnV0ZXNcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudGV4dCkge1xuICAgICAgdmFyIHJlcXVlc3QgPSBsZXgucG9zdFRleHQocGFyYW1zLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBuZXh0KGVycilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlLmxleCA9IHtcbiAgICAgICAgICAgIGludGVudDogZGF0YS5pbnRlbnROYW1lLFxuICAgICAgICAgICAgc2xvdHM6IGRhdGEuc2xvdHMsXG4gICAgICAgICAgICBzZXNzaW9uOiBkYXRhLnNlc3Npb25BdHRyaWJ1dGVzLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGRhdGEubWVzc2FnZSxcbiAgICAgICAgICAgIGRpYWxvZ1N0YXRlOiBkYXRhLmRpYWxvZ1N0YXRlLFxuICAgICAgICAgICAgc2xvdFRvRWxpY2l0OiBkYXRhLnNsb3RUb0VsaWNpdFxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1ZygncmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBMZXg6JywgbWVzc2FnZS5sZXgpXG4gICAgICAgICAgaWYgKGRhdGEuaW50ZW50TmFtZSkge1xuICAgICAgICAgICAgbWVzc2FnZS5pbnRlbnQgPT09IGRhdGEuaW50ZW50TmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dCgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGVhcmQgKGJvdCwgbWVzc2FnZSwgbmV4dCkge1xuICAgIGlmIChtZXNzYWdlLmxleCAmJiBtZXNzYWdlLmxleC5kaWFsb2dTdGF0ZSA9PT0gJ0Z1bGZpbGxlZCcgJiYgbWVzc2FnZS5sZXguaW50ZW50TmFtZSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGJvdC5yZXBseShtZXNzYWdlLCBtZXNzYWdlLmxleC5tZXNzYWdlKVxuICAgIH1cbiAgICBuZXh0KClcbiAgfVxufVxuIl19