"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = _default;var _winston = _interopRequireDefault(require("winston"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}
/* eslint-disable */
require('winston-papertrail').Papertrail;
/* eslint-enable */

if (!process.env.PAPERTRAIL_HOST || !process.env.PAPERTRAIL_PORT) {
  throw new Error('PAPERTRAIL_HOST and PAPERTRAIL_PORT are required');
}

function _default() {var program = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';
  var allowedLevels = ['debug', 'info', 'warn', 'error'];
  if (!allowedLevels.includes(level)) {
    throw new Error("Log level should be one of: \n".concat(allowedLevels.join(',\n')));
  }

  var consoleLogger = new _winston["default"].transports.Console({
    level: level,
    timestamp: function timestamp() {
      return "basebot:".concat(program, ":");
    },
    colorize: true });


  var winstonPapertrail = new _winston["default"].transports.Papertrail({
    host: process.env.PAPERTRAIL_HOST,
    port: process.env.PAPERTRAIL_PORT,
    program: "basebot:".concat(program),
    level: level,
    colorize: true });


  var transports = [winstonPapertrail];

  if (process.env.NODE_ENV !== 'production') {
    transports.push(consoleLogger);
  }

  var logger = new _winston["default"].Logger({
    transports: transports });

  return function () {
    Array.prototype.forEach.call(arguments, function (arg) {return logger[level](arg);});
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJQYXBlcnRyYWlsIiwicHJvY2VzcyIsImVudiIsIlBBUEVSVFJBSUxfSE9TVCIsIlBBUEVSVFJBSUxfUE9SVCIsIkVycm9yIiwicHJvZ3JhbSIsImxldmVsIiwiYWxsb3dlZExldmVscyIsImluY2x1ZGVzIiwiam9pbiIsImNvbnNvbGVMb2dnZXIiLCJ3aW5zdG9uIiwidHJhbnNwb3J0cyIsIkNvbnNvbGUiLCJ0aW1lc3RhbXAiLCJjb2xvcml6ZSIsIndpbnN0b25QYXBlcnRyYWlsIiwiaG9zdCIsInBvcnQiLCJOT0RFX0VOViIsInB1c2giLCJsb2dnZXIiLCJMb2dnZXIiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJjYWxsIiwiYXJndW1lbnRzIiwiYXJnIl0sIm1hcHBpbmdzIjoieUdBQUEsMEQ7QUFDQTtBQUNBQSxPQUFPLENBQUMsb0JBQUQsQ0FBUCxDQUE4QkMsVUFBOUI7QUFDQTs7QUFFQSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxlQUFiLElBQWdDLENBQUNGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxlQUFqRCxFQUFrRTtBQUNoRSxRQUFNLElBQUlDLEtBQUosQ0FBVSxrREFBVixDQUFOO0FBQ0Q7O0FBRWMsb0JBQXVDLEtBQTlCQyxPQUE4Qix1RUFBcEIsRUFBb0IsS0FBaEJDLEtBQWdCLHVFQUFSLE1BQVE7QUFDcEQsTUFBTUMsYUFBYSxHQUFHLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0IsTUFBbEIsRUFBMEIsT0FBMUIsQ0FBdEI7QUFDQSxNQUFJLENBQUNBLGFBQWEsQ0FBQ0MsUUFBZCxDQUF1QkYsS0FBdkIsQ0FBTCxFQUFvQztBQUNsQyxVQUFNLElBQUlGLEtBQUoseUNBQTJDRyxhQUFhLENBQUNFLElBQWQsQ0FBbUIsS0FBbkIsQ0FBM0MsRUFBTjtBQUNEOztBQUVELE1BQU1DLGFBQWEsR0FBRyxJQUFJQyxvQkFBUUMsVUFBUixDQUFtQkMsT0FBdkIsQ0FBK0I7QUFDbkRQLElBQUFBLEtBQUssRUFBTEEsS0FEbUQ7QUFFbkRRLElBQUFBLFNBRm1ELHVCQUV2QztBQUNWLCtCQUFrQlQsT0FBbEI7QUFDRCxLQUprRDtBQUtuRFUsSUFBQUEsUUFBUSxFQUFFLElBTHlDLEVBQS9CLENBQXRCOzs7QUFRQSxNQUFNQyxpQkFBaUIsR0FBRyxJQUFJTCxvQkFBUUMsVUFBUixDQUFtQmIsVUFBdkIsQ0FBa0M7QUFDMURrQixJQUFBQSxJQUFJLEVBQUVqQixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsZUFEd0M7QUFFMURnQixJQUFBQSxJQUFJLEVBQUVsQixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsZUFGd0M7QUFHMURFLElBQUFBLE9BQU8sb0JBQWFBLE9BQWIsQ0FIbUQ7QUFJMURDLElBQUFBLEtBQUssRUFBTEEsS0FKMEQ7QUFLMURTLElBQUFBLFFBQVEsRUFBRSxJQUxnRCxFQUFsQyxDQUExQjs7O0FBUUEsTUFBTUgsVUFBVSxHQUFHLENBQUNJLGlCQUFELENBQW5COztBQUVBLE1BQUloQixPQUFPLENBQUNDLEdBQVIsQ0FBWWtCLFFBQVosS0FBeUIsWUFBN0IsRUFBMkM7QUFDekNQLElBQUFBLFVBQVUsQ0FBQ1EsSUFBWCxDQUFnQlYsYUFBaEI7QUFDRDs7QUFFRCxNQUFNVyxNQUFNLEdBQUcsSUFBSVYsb0JBQVFXLE1BQVosQ0FBbUI7QUFDaENWLElBQUFBLFVBQVUsRUFBVkEsVUFEZ0MsRUFBbkIsQ0FBZjs7QUFHQSxTQUFPLFlBQVc7QUFDaEJXLElBQUFBLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsT0FBaEIsQ0FBd0JDLElBQXhCLENBQTZCQyxTQUE3QixFQUF3QyxVQUFBQyxHQUFHLFVBQUlQLE1BQU0sQ0FBQ2YsS0FBRCxDQUFOLENBQWNzQixHQUFkLENBQUosRUFBM0M7QUFDRCxHQUZEO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2luc3RvbiBmcm9tICd3aW5zdG9uJ1xuLyogZXNsaW50LWRpc2FibGUgKi9cbnJlcXVpcmUoJ3dpbnN0b24tcGFwZXJ0cmFpbCcpLlBhcGVydHJhaWxcbi8qIGVzbGludC1lbmFibGUgKi9cblxuaWYgKCFwcm9jZXNzLmVudi5QQVBFUlRSQUlMX0hPU1QgfHwgIXByb2Nlc3MuZW52LlBBUEVSVFJBSUxfUE9SVCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1BBUEVSVFJBSUxfSE9TVCBhbmQgUEFQRVJUUkFJTF9QT1JUIGFyZSByZXF1aXJlZCcpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHByb2dyYW0gPSAnJywgbGV2ZWwgPSAnaW5mbycpIHtcbiAgY29uc3QgYWxsb3dlZExldmVscyA9IFsnZGVidWcnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJ11cbiAgaWYgKCFhbGxvd2VkTGV2ZWxzLmluY2x1ZGVzKGxldmVsKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTG9nIGxldmVsIHNob3VsZCBiZSBvbmUgb2Y6IFxcbiR7YWxsb3dlZExldmVscy5qb2luKCcsXFxuJyl9YClcbiAgfVxuXG4gIGNvbnN0IGNvbnNvbGVMb2dnZXIgPSBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgIGxldmVsLFxuICAgIHRpbWVzdGFtcCgpIHtcbiAgICAgIHJldHVybiBgYmFzZWJvdDoke3Byb2dyYW19OmBcbiAgICB9LFxuICAgIGNvbG9yaXplOiB0cnVlXG4gIH0pXG5cbiAgY29uc3Qgd2luc3RvblBhcGVydHJhaWwgPSBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLlBhcGVydHJhaWwoe1xuICAgIGhvc3Q6IHByb2Nlc3MuZW52LlBBUEVSVFJBSUxfSE9TVCxcbiAgICBwb3J0OiBwcm9jZXNzLmVudi5QQVBFUlRSQUlMX1BPUlQsXG4gICAgcHJvZ3JhbTogYGJhc2Vib3Q6JHtwcm9ncmFtfWAsXG4gICAgbGV2ZWwsXG4gICAgY29sb3JpemU6IHRydWVcbiAgfSlcblxuICBjb25zdCB0cmFuc3BvcnRzID0gW3dpbnN0b25QYXBlcnRyYWlsXVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdHJhbnNwb3J0cy5wdXNoKGNvbnNvbGVMb2dnZXIpXG4gIH1cblxuICBjb25zdCBsb2dnZXIgPSBuZXcgd2luc3Rvbi5Mb2dnZXIoe1xuICAgIHRyYW5zcG9ydHMgfSlcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhcmd1bWVudHMsIGFyZyA9PiBsb2dnZXJbbGV2ZWxdKGFyZykpXG4gIH1cbn1cbiJdfQ==