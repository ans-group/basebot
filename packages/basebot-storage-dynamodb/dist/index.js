"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;
var _awsSdk = require("aws-sdk");
var _mapValues = _interopRequireDefault(require("lodash/mapValues"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };} // based on https://github.com/joshuahoover/botkit-storage-dynamodb/blob/master/src/index.js
var _default =
function _default() {var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {return console.log;};
  var debug = logger('services:storage:dynamoDB', 'debug');
  var error = logger('services:storage:dynamoDB', 'error');

  if (!process.env.AWS_REGION || !process.env.AWS_SECRET_ACCESS_KEY || !process.env.AWS_ACCESS_KEY_ID) {
    error('AWS_REGION, AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID are required');
  }
  var params = { region: process.env.AWS_REGION };
  if (process.env.NODE_ENV !== 'production') {
    params.endpoint = 'http://localhost:8000';
  }
  var db = new _awsSdk.DynamoDB(params);
  var storage = {};
  var keys = ['teams', 'channels', 'users', 'responses'];
  keys.forEach(function (type) {
    var dynamoTable = type === 'responses' ? 'response' : type;
    storage[type] = getStorage(db, dynamoTable);
  });

  function getStorage(db, table) {
    return {
      get: function get(hash) {return new Promise(function (resolve, reject) {
          debug('fetching doc with hash: ', hash, ' from ', table);
          var cb = function cb(err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            debug('Response received: ', res);
            var items = res.Items || [];
            if (items.length === 0) {// no result found
              resolve(null);
            } else {// result found
              resolve((0, _mapValues["default"])(items[0], cleanRes));
            }
          };
          if (table === 'responses') {
            db.getItem({
              TableName: table,
              Key: {
                intentName: {
                  S: hash } } },


            cb);
          } else {
            db.getItem({
              TableName: table,
              Key: {
                _id: {
                  S: hash } } },


            cb);
          }
        });},

      save: function save(data) {return new Promise(function (resolve, reject) {
          debug('saving doc with data: ', data);
          db.putItem({
            TableName: table,
            Item: (0, _mapValues["default"])(data, function (value) {return {
                S: value };}) },

          function (err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            res = res || {};
            resolve(res);
          });
        });},

      all: function all() {return new Promise(function (resolve, reject) {
          debug('fetching all docs');
          db.scan({
            TableName: table },
          function (err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            var items = res.Items || [];
            resolve((0, _mapValues["default"])(items, cleanRes));
          });
        });} };

  }

  function cleanRes(value) {
    return Object.values(value)[0];
  }

  return storage;
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,