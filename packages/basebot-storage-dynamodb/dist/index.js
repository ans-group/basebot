"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;
var _dynasty = _interopRequireDefault(require("dynasty"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };} // based on https://github.com/joshuahoover/botkit-storage-dynamodb/blob/master/src/index.js
var _default =
function _default() {var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {return console.log;};
  if (!process.env.AWS_REGION || !process.env.AWS_SECRET_ACCESS_KEY || !process.env.AWS_ACCESS_KEY_ID) throw new Error('AWS_REGION, AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID are required');
  var debug = logger('services:storage:dynamoDB', 'debug');
  var error = logger('services:storage:dynamoDB', 'error');

  var dynamoTable = 'basebot';
  var db = (0, _dynasty["default"])({
    region: process.env.AWS_REGION,
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    dynamoTable: dynamoTable });

  var storage = {};
  var keys = ['teams', 'channels', 'users', 'responses'];
  keys.forEach(function (type) {
    storage[type] = getStorage(db, config.dynamoTable, type);
  });

  return storage;
};exports["default"] = _default;

function getStorage(db, table, type) {
  var dynamo = db.table(table);

  return {
    get: function get(id) {return new Promise(function (resolve, reject) {
        debug('fetching doc with ID: ', id);
        dynamo.find({ hash: type, range: id }).
        then(function (res) {
          res = res || {};
          if (Object.keys(res).length === 0) {// no result found
            resolve(null);
          } else {// result found
            resolve(res);
          }
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });},

    save: function save(data) {return new Promise(function (resolve, reject) {
        debug('saving doc with data: ', data);
        dynamo.update({ hash: type, range: data.id }, removeTypeAndID(data)).
        then(function (res) {
          res = res || {};
          resolve(res);
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });},

    all: function all() {return new Promise(function (resolve, reject) {
        debug('fetching all docs');
        dynamo.findAll(type).
        then(function (res) {
          res = res || {};
          resolve(res);
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });} };

}

function removeTypeAndID(data) {
  var copy = JSON.parse(JSON.stringify(data));
  delete copy.id;
  delete copy.type;
  return copy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsIkFXU19TRUNSRVRfQUNDRVNTX0tFWSIsIkFXU19BQ0NFU1NfS0VZX0lEIiwiRXJyb3IiLCJkZWJ1ZyIsImVycm9yIiwiZHluYW1vVGFibGUiLCJkYiIsInJlZ2lvbiIsImFjY2Vzc0tleUlkIiwic2VjcmV0QWNjZXNzS2V5Iiwic3RvcmFnZSIsImtleXMiLCJmb3JFYWNoIiwidHlwZSIsImdldFN0b3JhZ2UiLCJjb25maWciLCJ0YWJsZSIsImR5bmFtbyIsImdldCIsImlkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmaW5kIiwiaGFzaCIsInJhbmdlIiwidGhlbiIsInJlcyIsIk9iamVjdCIsImxlbmd0aCIsImVyciIsInNhdmUiLCJkYXRhIiwidXBkYXRlIiwicmVtb3ZlVHlwZUFuZElEIiwiYWxsIiwiZmluZEFsbCIsImNvcHkiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7QUFDQSwwRCxnR0FEQTs7QUFHZSxvQkFBZ0MsS0FBL0JBLE1BQStCLHVFQUF0QixvQkFBTUMsT0FBTyxDQUFDQyxHQUFkLEVBQXNCO0FBQzdDLE1BQUksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBQWIsSUFBMkIsQ0FBQ0YsT0FBTyxDQUFDQyxHQUFSLENBQVlFLHFCQUF4QyxJQUFpRSxDQUFDSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUcsaUJBQWxGLEVBQXFHLE1BQU0sSUFBSUMsS0FBSixDQUFVLHNFQUFWLENBQU47QUFDckcsTUFBTUMsS0FBSyxHQUFHVCxNQUFNLENBQUMsMkJBQUQsRUFBOEIsT0FBOUIsQ0FBcEI7QUFDQSxNQUFNVSxLQUFLLEdBQUdWLE1BQU0sQ0FBQywyQkFBRCxFQUE4QixPQUE5QixDQUFwQjs7QUFFQSxNQUFNVyxXQUFXLEdBQUcsU0FBcEI7QUFDQSxNQUFNQyxF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QyxtQkFBRCxDQUFMO0FBQ0FjLFFBQUFBLE1BQU0sQ0FBQ21CLE9BQVAsQ0FBZXZCLElBQWY7QUFDR2EsUUFBQUEsSUFESCxDQUNRLFVBQVVDLEdBQVYsRUFBZTtBQUNuQkEsVUFBQUEsR0FBRyxHQUFHQSxHQUFHLElBQUksRUFBYjtBQUNBTixVQUFBQSxPQUFPLENBQUNNLEdBQUQsQ0FBUDtBQUNELFNBSkgsV0FJVyxVQUFVRyxHQUFWLEVBQWU7QUFDeEIxQixVQUFBQSxLQUFLLENBQUMwQixHQUFELENBQUw7QUFDQVIsVUFBQUEsTUFBTSxDQUFDUSxHQUFELENBQU47QUFDRCxTQVBEO0FBUUQsT0FWVSxDQUFOLEVBN0JBLEVBQVA7O0FBeUNEOztBQUVELFNBQVNJLGVBQVQsQ0FBMEJGLElBQTFCLEVBQWdDO0FBQzlCLE1BQUlLLElBQUksR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsU0FBTCxDQUFlUixJQUFmLENBQVgsQ0FBWDtBQUNBLFNBQU9LLElBQUksQ0FBQ2xCLEVBQVo7QUFDQSxTQUFPa0IsSUFBSSxDQUFDeEIsSUFBWjtBQUNBLFNBQU93QixJQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vam9zaHVhaG9vdmVyL2JvdGtpdC1zdG9yYWdlLWR5bmFtb2RiL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC5qc1xuaW1wb3J0IGR5bmFzdHkgZnJvbSAnZHluYXN0eSdcblxuZXhwb3J0IGRlZmF1bHQgKGxvZ2dlciA9ICgpID0+IGNvbnNvbGUubG9nKSA9PiB7XG4gIGlmICghcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCAhcHJvY2Vzcy5lbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZIHx8ICFwcm9jZXNzLmVudi5BV1NfQUNDRVNTX0tFWV9JRCkgdGhyb3cgbmV3IEVycm9yKCdBV1NfUkVHSU9OLCBBV1NfU0VDUkVUX0FDQ0VTU19LRVkgYW5kIEFXU19BQ0NFU1NfS0VZX0lEIGFyZSByZXF1aXJlZCcpXG4gIGNvbnN0IGRlYnVnID0gbG9nZ2VyKCdzZXJ2aWNlczpzdG9yYWdlOmR5bmFtb0RCJywgJ2RlYnVnJylcbiAgY29uc3QgZXJyb3IgPSBsb2dnZXIoJ3NlcnZpY2VzOnN0b3JhZ2U6ZHluYW1vREInLCAnZXJyb3InKVxuXG4gIGNvbnN0IGR5bmFtb1RhYmxlID0gJ2Jhc2Vib3QnXG4gIGNvbnN0IGRiID0gZHluYXN0eSh7XG4gICAgcmVnaW9uOiBwcm9jZXNzLmVudi5BV1NfUkVHSU9OLFxuICAgIGFjY2Vzc0tleUlkOiBwcm9jZXNzLmVudi5BV1NfQUNDRVNTX0tFWV9JRCxcbiAgICBzZWNyZXRBY2Nlc3NLZXk6IHByb2Nlc3MuZW52LkFXU19TRUNSRVRfQUNDRVNTX0tFWSxcbiAgZHluYW1vVGFibGV9KVxuXG4gIGNvbnN0IHN0b3JhZ2UgPSB7fVxuICBjb25zdCBrZXlzID0gWyd0ZWFtcycsICdjaGFubmVscycsICd1c2VycycsICdyZXNwb25zZXMnXVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBzdG9yYWdlW3R5cGVdID0gZ2V0U3RvcmFnZShkYiwgY29uZmlnLmR5bmFtb1RhYmxlLCB0eXBlKVxuICB9KVxuXG4gIHJldHVybiBzdG9yYWdlXG59XG5cbmZ1bmN0aW9uIGdldFN0b3JhZ2UgKGRiLCB0YWJsZSwgdHlwZSkge1xuICB2YXIgZHluYW1vID0gZGIudGFibGUodGFibGUpXG5cbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGlkID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRlYnVnKCdmZXRjaGluZyBkb2Mgd2l0aCBJRDogJywgaWQpXG4gICAgICBkeW5hbW8uZmluZCh7aGFzaDogdHlwZSwgcmFuZ2U6IGlkfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIHJlcyA9IHJlcyB8fCB7fVxuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhyZXMpLmxlbmd0aCA9PT0gMCkgeyAvLyBubyByZXN1bHQgZm91bmRcbiAgICAgICAgICAgIHJlc29sdmUobnVsbClcbiAgICAgICAgICB9IGVsc2UgeyAvLyByZXN1bHQgZm91bmRcbiAgICAgICAgICAgIHJlc29sdmUocmVzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBlcnJvcihlcnIpXG4gICAgICAgIHJlamVjdChlcnIpXG4gICAgICB9KVxuICAgIH0pLFxuXG4gICAgc2F2ZTogZGF0YSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBkZWJ1Zygnc2F2aW5nIGRvYyB3aXRoIGRhdGE6ICcsIGRhdGEpXG4gICAgICBkeW5hbW8udXBkYXRlKHsgaGFzaDogdHlwZSwgcmFuZ2U6IGRhdGEuaWQgfSwgcmVtb3ZlVHlwZUFuZElEKGRhdGEpKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgcmVzID0gcmVzIHx8IHt9XG4gICAgICAgICAgcmVzb2x2ZShyZXMpXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZXJyb3IoZXJyKVxuICAgICAgICByZWplY3QoZXJyKVxuICAgICAgfSlcbiAgICB9KSxcblxuICAgIGFsbDogKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZGVidWcoJ2ZldGNoaW5nIGFsbCBkb2NzJylcbiAgICAgIGR5bmFtby5maW5kQWxsKHR5cGUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICByZXMgPSByZXMgfHwge31cbiAgICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBlcnJvcihlcnIpXG4gICAgICAgIHJlamVjdChlcnIpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHlwZUFuZElEIChkYXRhKSB7XG4gIHZhciBjb3B5ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgZGVsZXRlIGNvcHkuaWRcbiAgZGVsZXRlIGNvcHkudHlwZVxuICByZXR1cm4gY29weVxufVxuIl19