"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;
var _dynasty = _interopRequireDefault(require("dynasty"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };} // based on https://github.com/joshuahoover/botkit-storage-dynamodb/blob/master/src/index.js
var _default =
function _default() {var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {return console.log;};
  if (!process.env.AWS_REGION || !process.env.AWS_SECRET_ACCESS_KEY || !process.env.AWS_ACCESS_KEY_ID) throw new Error('AWS_REGION, AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID are required');
  var debug = logger('services:storage:dynamoDB', 'debug');
  var error = logger('services:storage:dynamoDB', 'error');

  var dynamoTable = 'basebot';
  var db = (0, _dynasty["default"])({
    region: process.env.AWS_REGION,
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    dynamoTable: dynamoTable });

  var storage = {};
  var keys = ['teams', 'channels', 'users', 'responses'];
  keys.forEach(function (type) {
    storage[type] = getStorage(db, dynamoTable, type);
  });

  return storage;
};exports["default"] = _default;

function getStorage(db, table, type) {
  var dynamo = db.table(table);

  return {
    get: function get(id) {return new Promise(function (resolve, reject) {
        debug('fetching doc with ID: ', id);
        dynamo.find({ hash: type, range: id }).
        then(function (res) {
          res = res || {};
          if (Object.keys(res).length === 0) {// no result found
            resolve(null);
          } else {// result found
            resolve(res);
          }
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });},

    save: function save(data) {return new Promise(function (resolve, reject) {
        debug('saving doc with data: ', data);
        dynamo.update({ hash: type, range: data.id }, removeTypeAndID(data)).
        then(function (res) {
          res = res || {};
          resolve(res);
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });},

    all: function all() {return new Promise(function (resolve, reject) {
        debug('fetching all docs');
        dynamo.findAll(type).
        then(function (res) {
          res = res || {};
          resolve(res);
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });} };

}

function removeTypeAndID(data) {
  var copy = JSON.parse(JSON.stringify(data));
  delete copy.id;
  delete copy.type;
  return copy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsIkFXU19TRUNSRVRfQUNDRVNTX0tFWSIsIkFXU19BQ0NFU1NfS0VZX0lEIiwiRXJyb3IiLCJkZWJ1ZyIsImVycm9yIiwiZHluYW1vVGFibGUiLCJkYiIsInJlZ2lvbiIsImFjY2Vzc0tleUlkIiwic2VjcmV0QWNjZXNzS2V5Iiwic3RvcmFnZSIsImtleXMiLCJmb3JFYWNoIiwidHlwZSIsImdldFN0b3JhZ2UiLCJ0YWJsZSIsImR5bmFtbyIsImdldCIsImlkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmaW5kIiwiaGFzaCIsInJhbmdlIiwidGhlbiIsInJlcyIsIk9iamVjdCIsImxlbmd0aCIsImVyciIsInNhdmUiLCJkYXRhIiwidXBkYXRlIiwicmVtb3ZlVHlwZUFuZElEIiwiYWxsIiwiZmluZEFsbCIsImNvcHkiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7QUFDQSwwRCxnR0FEQTs7QUFHZSxvQkFBZ0MsS0FBL0JBLE1BQStCLHVFQUF0QixvQkFBTUMsT0FBTyxDQUFDQyxHQUFkLEVBQXNCO0FBQzdDLE1BQUksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBQWIsSUFBMkIsQ0FBQ0YsT0FBTyxDQUFDQyxHQUFSLENBQVlFLHFCQUF4QyxJQUFpRSxDQUFDSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUcsaUJBQWxGLEVBQXFHLE1BQU0sSUFBSUMsS0FBSixDQUFVLHNFQUFWLENBQU47QUFDckcsTUFBTUMsS0FBSyxHQUFHVCxNQUFNLENBQUMsMkJBQUQsRUFBOEIsT0FBOUIsQ0FBcEI7QUFDQSxNQUFNVSxLQUFLLEdBQUdWLE1BQU0sQ0FBQywyQkFBRCxFQUE4QixPQUE5QixDQUFwQjs7QUFFQSxNQUFNVyxXQUFXLEdBQUcsU0FBcEI7QUFDQSxNQUFNQyxFQUFFLEdBQUcs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QUEsTUFBTSxDQUFDbUIsT0FBUCxDQUFldEIsSUFBZjtBQUNHWSxRQUFBQSxJQURILENBQ1EsVUFBVUMsR0FBVixFQUFlO0FBQ25CQSxVQUFBQSxHQUFHLEdBQUdBLEdBQUcsSUFBSSxFQUFiO0FBQ0FOLFVBQUFBLE9BQU8sQ0FBQ00sR0FBRCxDQUFQO0FBQ0QsU0FKSCxXQUlXLFVBQVVHLEdBQVYsRUFBZTtBQUN4QnpCLFVBQUFBLEtBQUssQ0FBQ3lCLEdBQUQsQ0FBTDtBQUNBUixVQUFBQSxNQUFNLENBQUNRLEdBQUQsQ0FBTjtBQUNELFNBUEQ7QUFRRCxPQVZVLENBQU4sRUE3QkEsRUFBUDs7QUF5Q0Q7O0FBRUQsU0FBU0ksZUFBVCxDQUEwQkYsSUFBMUIsRUFBZ0M7QUFDOUIsTUFBSUssSUFBSSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxTQUFMLENBQWVSLElBQWYsQ0FBWCxDQUFYO0FBQ0EsU0FBT0ssSUFBSSxDQUFDbEIsRUFBWjtBQUNBLFNBQU9rQixJQUFJLENBQUN2QixJQUFaO0FBQ0EsU0FBT3VCLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3NodWFob292ZXIvYm90a2l0LXN0b3JhZ2UtZHluYW1vZGIvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LmpzXG5pbXBvcnQgZHluYXN0eSBmcm9tICdkeW5hc3R5J1xuXG5leHBvcnQgZGVmYXVsdCAobG9nZ2VyID0gKCkgPT4gY29uc29sZS5sb2cpID0+IHtcbiAgaWYgKCFwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICFwcm9jZXNzLmVudi5BV1NfU0VDUkVUX0FDQ0VTU19LRVkgfHwgIXByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEKSB0aHJvdyBuZXcgRXJyb3IoJ0FXU19SRUdJT04sIEFXU19TRUNSRVRfQUNDRVNTX0tFWSBhbmQgQVdTX0FDQ0VTU19LRVlfSUQgYXJlIHJlcXVpcmVkJylcbiAgY29uc3QgZGVidWcgPSBsb2dnZXIoJ3NlcnZpY2VzOnN0b3JhZ2U6ZHluYW1vREInLCAnZGVidWcnKVxuICBjb25zdCBlcnJvciA9IGxvZ2dlcignc2VydmljZXM6c3RvcmFnZTpkeW5hbW9EQicsICdlcnJvcicpXG5cbiAgY29uc3QgZHluYW1vVGFibGUgPSAnYmFzZWJvdCdcbiAgY29uc3QgZGIgPSBkeW5hc3R5KHtcbiAgICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04sXG4gICAgYWNjZXNzS2V5SWQ6IHByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lELFxuICAgIHNlY3JldEFjY2Vzc0tleTogcHJvY2Vzcy5lbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZLFxuICBkeW5hbW9UYWJsZX0pXG5cbiAgY29uc3Qgc3RvcmFnZSA9IHt9XG4gIGNvbnN0IGtleXMgPSBbJ3RlYW1zJywgJ2NoYW5uZWxzJywgJ3VzZXJzJywgJ3Jlc3BvbnNlcyddXG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHN0b3JhZ2VbdHlwZV0gPSBnZXRTdG9yYWdlKGRiLCBkeW5hbW9UYWJsZSwgdHlwZSlcbiAgfSlcblxuICByZXR1cm4gc3RvcmFnZVxufVxuXG5mdW5jdGlvbiBnZXRTdG9yYWdlIChkYiwgdGFibGUsIHR5cGUpIHtcbiAgdmFyIGR5bmFtbyA9IGRiLnRhYmxlKHRhYmxlKVxuXG4gIHJldHVybiB7XG4gICAgZ2V0OiBpZCA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBkZWJ1ZygnZmV0Y2hpbmcgZG9jIHdpdGggSUQ6ICcsIGlkKVxuICAgICAgZHluYW1vLmZpbmQoe2hhc2g6IHR5cGUsIHJhbmdlOiBpZH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICByZXMgPSByZXMgfHwge31cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXMocmVzKS5sZW5ndGggPT09IDApIHsgLy8gbm8gcmVzdWx0IGZvdW5kXG4gICAgICAgICAgICByZXNvbHZlKG51bGwpXG4gICAgICAgICAgfSBlbHNlIHsgLy8gcmVzdWx0IGZvdW5kXG4gICAgICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZXJyb3IoZXJyKVxuICAgICAgICByZWplY3QoZXJyKVxuICAgICAgfSlcbiAgICB9KSxcblxuICAgIHNhdmU6IGRhdGEgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZGVidWcoJ3NhdmluZyBkb2Mgd2l0aCBkYXRhOiAnLCBkYXRhKVxuICAgICAgZHluYW1vLnVwZGF0ZSh7IGhhc2g6IHR5cGUsIHJhbmdlOiBkYXRhLmlkIH0sIHJlbW92ZVR5cGVBbmRJRChkYXRhKSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIHJlcyA9IHJlcyB8fCB7fVxuICAgICAgICAgIHJlc29sdmUocmVzKVxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGVycm9yKGVycilcbiAgICAgICAgcmVqZWN0KGVycilcbiAgICAgIH0pXG4gICAgfSksXG5cbiAgICBhbGw6ICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRlYnVnKCdmZXRjaGluZyBhbGwgZG9jcycpXG4gICAgICBkeW5hbW8uZmluZEFsbCh0eXBlKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgcmVzID0gcmVzIHx8IHt9XG4gICAgICAgICAgcmVzb2x2ZShyZXMpXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgZXJyb3IoZXJyKVxuICAgICAgICByZWplY3QoZXJyKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVR5cGVBbmRJRCAoZGF0YSkge1xuICB2YXIgY29weSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gIGRlbGV0ZSBjb3B5LmlkXG4gIGRlbGV0ZSBjb3B5LnR5cGVcbiAgcmV0dXJuIGNvcHlcbn1cbiJdfQ==