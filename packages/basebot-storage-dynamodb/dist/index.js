"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;
var _awsSdk = require("aws-sdk");
var _mapValues = _interopRequireDefault(require("lodash/mapValues"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };} // based on https://github.com/joshuahoover/botkit-storage-dynamodb/blob/master/src/index.js
var _default =
function _default() {var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {return console.log;};
  var debug = logger('services:storage:dynamoDB', 'debug');
  var error = logger('services:storage:dynamoDB', 'error');

  if (!process.env.AWS_REGION || !process.env.AWS_SECRET_ACCESS_KEY || !process.env.AWS_ACCESS_KEY_ID) {
    error('AWS_REGION, AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID are required');
  }
  var params = { region: process.env.AWS_REGION };
  if (process.env.NODE_ENV !== 'production') {
    params.endpoint = 'http://localhost:8000';
  }
  var db = new _awsSdk.DynamoDB(params);
  var storage = {};
  var keys = ['teams', 'channels', 'users', 'responses'];
  keys.forEach(function (type) {
    var dynamoTable = type === 'responses' ? 'response' : type;
    storage[type] = getStorage(db, dynamoTable);
  });

  function getStorage(db, table) {
    return {
      get: function get(hash) {return new Promise(function (resolve, reject) {
          debug('fetching doc with hash: ', hash, ' from ', table);
          var cb = function cb(err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            debug('Response received: ', res);
            var items = res.Items || [];
            if (items.length === 0) {// no result found
              resolve(null);
            } else {// result found
              resolve((0, _mapValues["default"])(items[0], cleanRes));
            }
          };
          if (table === 'responses') {
            db.query({
              TableName: table,
              IndexName: 'intentName',
              KeyConditionExpression: 'intentName = :v1',
              ExpressionAttributeValues: {
                ':v1': {
                  S: hash } } },


            cb);
          } else {
            db.getItem({
              TableName: table,
              Key: {
                _id: {
                  S: hash } } },


            cb);
          }
        });},

      save: function save(data) {return new Promise(function (resolve, reject) {
          debug('saving doc with data: ', data);
          db.putItem({
            TableName: table,
            Item: (0, _mapValues["default"])(data, function (value) {return {
                S: value };}) },

          function (err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            res = res || {};
            resolve(res);
          });
        });},

      all: function all() {return new Promise(function (resolve, reject) {
          debug('fetching all docs');
          db.scan({
            TableName: table },
          function (err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            var items = res.Items || [];
            resolve((0, _mapValues["default"])(items, cleanRes));
          });
        });} };

  }

  function cleanRes(value) {
    return Object.values(value)[0];
  }

  return storage;
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImNvbnNvbGUiLCJsb2ciLCJkZWJ1ZyIsImVycm9yIiwicHJvY2VzcyIsImVudiIsIkFXU19SRUdJT04iLCJBV1NfU0VDUkVUX0FDQ0VTU19LRVkiLCJBV1NfQUNDRVNTX0tFWV9JRCIsInBhcmFtcyIsInJlZ2lvbiIsIk5PREVfRU5WIiwiZW5kcG9pbnQiLCJkYiIsIkR5bmFtb0RCIiwic3RvcmFnZSIsImtleXMiLCJmb3JFYWNoIiwidHlwZSIsImR5bmFtb1RhYmxlIiwiZ2V0U3RvcmFnZSIsInRhYmxlIiwiZ2V0IiwiaGFzaCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2IiLCJlcnIiLCJyZXMiLCJpdGVtcyIsIkl0ZW1zIiwibGVuZ3RoIiwiY2xlYW5SZXMiLCJxdWVyeSIsIlRhYmxlTmFtZSIsIkluZGV4TmFtZSIsIktleUNvbmRpdGlvbkV4cHJlc3Npb24iLCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzIiwiUyIsImdldEl0ZW0iLCJLZXkiLCJfaWQiLCJzYXZlIiwiZGF0YSIsInB1dEl0ZW0iLCJJdGVtIiwidmFsdWUiLCJhbGwiLCJzY2FuIiwiT2JqZWN0IiwidmFsdWVzIl0sIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQSxxRSxnR0FGQTs7QUFJZSxvQkFBZ0MsS0FBL0JBLE1BQStCLHVFQUF0QixvQkFBTUMsT0FBTyxDQUFDQyxHQUFkLEVBQXNCO0FBQzdDLE1BQU1DLEtBQUssR0FBR0gsTUFBTSxDQUFDLDJCQUFELEVBQThCLE9BQTlCLENBQXBCO0FBQ0EsTUFBTUksS0FBSyxHQUFHSixNQUFNLENBQUMsMkJBQUQsRUFBOEIsT0FBOUIsQ0FBcEI7O0FBRUEsTUFBSSxDQUFDSyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBYixJQUEyQixDQUFDRixPQUFPLENBQUNDLEdBQVIsQ0FBWUUscUJBQXhDLElBQWlFLENBQUNILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxpQkFBbEYsRUFB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QW1CYyxLQUFuQixFQUEwQjtBQUN4QixXQUFPRyxNQUFNLENBQUNDLE1BQVAsQ0FBY0osS0FBZCxFQUFxQixDQUFyQixDQUFQO0FBQ0Q7O0FBRUQsU0FBT2hDLE9BQVA7QUFDRCxDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2pvc2h1YWhvb3Zlci9ib3RraXQtc3RvcmFnZS1keW5hbW9kYi9ibG9iL21hc3Rlci9zcmMvaW5kZXguanNcbmltcG9ydCB7IER5bmFtb0RCIH0gZnJvbSAnYXdzLXNkaydcbmltcG9ydCBtYXBWYWx1ZXMgZnJvbSAnbG9kYXNoL21hcFZhbHVlcydcblxuZXhwb3J0IGRlZmF1bHQgKGxvZ2dlciA9ICgpID0+IGNvbnNvbGUubG9nKSA9PiB7XG4gIGNvbnN0IGRlYnVnID0gbG9nZ2VyKCdzZXJ2aWNlczpzdG9yYWdlOmR5bmFtb0RCJywgJ2RlYnVnJylcbiAgY29uc3QgZXJyb3IgPSBsb2dnZXIoJ3NlcnZpY2VzOnN0b3JhZ2U6ZHluYW1vREInLCAnZXJyb3InKVxuXG4gIGlmICghcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTiB8fCAhcHJvY2Vzcy5lbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZIHx8ICFwcm9jZXNzLmVudi5BV1NfQUNDRVNTX0tFWV9JRCkge1xuICAgIGVycm9yKCdBV1NfUkVHSU9OLCBBV1NfU0VDUkVUX0FDQ0VTU19LRVkgYW5kIEFXU19BQ0NFU1NfS0VZX0lEIGFyZSByZXF1aXJlZCcpXG4gIH1cbiAgY29uc3QgcGFyYW1zID0ge3JlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTn1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHBhcmFtcy5lbmRwb2ludCA9ICdodHRwOi8vbG9jYWxob3N0OjgwMDAnXG4gIH1cbiAgY29uc3QgZGIgPSBuZXcgRHluYW1vREIocGFyYW1zKVxuICBjb25zdCBzdG9yYWdlID0ge31cbiAgY29uc3Qga2V5cyA9IFsndGVhbXMnLCAnY2hhbm5lbHMnLCAndXNlcnMnLCAncmVzcG9uc2VzJ11cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgY29uc3QgZHluYW1vVGFibGUgPSB0eXBlID09PSAncmVzcG9uc2VzJyA/ICdyZXNwb25zZScgOiB0eXBlXG4gICAgc3RvcmFnZVt0eXBlXSA9IGdldFN0b3JhZ2UoZGIsIGR5bmFtb1RhYmxlKVxuICB9KVxuXG4gIGZ1bmN0aW9uIGdldFN0b3JhZ2UgKGRiLCB0YWJsZSkge1xuICAgIHJldHVybiB7XG4gICAgICBnZXQ6IGhhc2ggPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBkZWJ1ZygnZmV0Y2hpbmcgZG9jIHdpdGggaGFzaDogJywgaGFzaCwgJyBmcm9tICcsIHRhYmxlKVxuICAgICAgICBjb25zdCBjYiA9IChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGVycm9yKGVycilcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKVxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1ZygnUmVzcG9uc2UgcmVjZWl2ZWQ6ICcsIHJlcylcbiAgICAgICAgICBjb25zdCBpdGVtcyA9IHJlcy5JdGVtcyB8fCBbXVxuICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHsgLy8gbm8gcmVzdWx0IGZvdW5kXG4gICAgICAgICAgICByZXNvbHZlKG51bGwpXG4gICAgICAgICAgfSBlbHNlIHsgLy8gcmVzdWx0IGZvdW5kXG4gICAgICAgICAgICByZXNvbHZlKG1hcFZhbHVlcyhpdGVtc1swXSwgY2xlYW5SZXMpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGFibGUgPT09ICdyZXNwb25zZXMnKSB7XG4gICAgICAgICAgZGIucXVlcnkoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiB0YWJsZSxcbiAgICAgICAgICAgIEluZGV4TmFtZTogJ2ludGVudE5hbWUnLFxuICAgICAgICAgICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjogJ2ludGVudE5hbWUgPSA6djEnLFxuICAgICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge1xuICAgICAgICAgICAgICAnOnYxJzoge1xuICAgICAgICAgICAgICAgIFM6IGhhc2hcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGNiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRiLmdldEl0ZW0oe1xuICAgICAgICAgICAgVGFibGVOYW1lOiB0YWJsZSxcbiAgICAgICAgICAgIEtleToge1xuICAgICAgICAgICAgICBfaWQ6IHtcbiAgICAgICAgICAgICAgICBTOiBoYXNoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBjYilcbiAgICAgICAgfVxuICAgICAgfSksXG5cbiAgICAgIHNhdmU6IGRhdGEgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBkZWJ1Zygnc2F2aW5nIGRvYyB3aXRoIGRhdGE6ICcsIGRhdGEpXG4gICAgICAgIGRiLnB1dEl0ZW0oe1xuICAgICAgICAgIFRhYmxlTmFtZTogdGFibGUsXG4gICAgICAgICAgSXRlbTogbWFwVmFsdWVzKGRhdGEsIHZhbHVlID0+ICh7XG4gICAgICAgICAgICBTOiB2YWx1ZVxuICAgICAgICAgIH0pKVxuICAgICAgICB9LCAoZXJyLCByZXMpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBlcnJvcihlcnIpXG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycilcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzID0gcmVzIHx8IHt9XG4gICAgICAgICAgcmVzb2x2ZShyZXMpXG4gICAgICAgIH0pXG4gICAgICB9KSxcblxuICAgICAgYWxsOiAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGRlYnVnKCdmZXRjaGluZyBhbGwgZG9jcycpXG4gICAgICAgIGRiLnNjYW4oe1xuICAgICAgICAgIFRhYmxlTmFtZTogdGFibGVcbiAgICAgICAgfSwgKGVyciwgcmVzKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZXJyb3IoZXJyKVxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGl0ZW1zID0gcmVzLkl0ZW1zIHx8IFtdXG4gICAgICAgICAgcmVzb2x2ZShtYXBWYWx1ZXMoaXRlbXMsIGNsZWFuUmVzKSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW5SZXMgKHZhbHVlKSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModmFsdWUpWzBdXG4gIH1cblxuICByZXR1cm4gc3RvcmFnZVxufVxuIl19