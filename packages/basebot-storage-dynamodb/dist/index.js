"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;
var _dynasty = _interopRequireDefault(require("dynasty"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };} // based on https://github.com/joshuahoover/botkit-storage-dynamodb/blob/master/src/index.js
var _default =
function _default() {var logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {return console.log;};
  if (!process.env.AWS_REGION || !process.env.AWS_SECRET_ACCESS_KEY || !process.env.AWS_ACCESS_KEY_ID) throw new Error('AWS_REGION, AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID are required');
  var debug = logger('services:storage:dynamoDB', 'debug');
  var error = logger('services:storage:dynamoDB', 'error');

  var dynamoTable = 'basebot';
  var db = (0, _dynasty["default"])({
    region: process.env.AWS_REGION,
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    dynamoTable: dynamoTable });

  var storage = {}[('teams', 'channels', 'users', 'responses')].forEach(function (type) {
    storage[type] = getStorage(db, config.dynamoTable, type);
  });

  return storage;
};exports["default"] = _default;

function getStorage(db, table, type) {
  var dynamo = db.table(table);

  return {
    get: function get(id) {return new Promise(function (resolve, reject) {
        debug('fetching doc with ID: ', id);
        dynamo.find({ hash: type, range: id }).
        then(function (res) {
          res = res || {};
          if (Object.keys(res).length === 0) {// no result found
            resolve(null);
          } else {// result found
            resolve(res);
          }
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });},

    save: function save(data) {return new Promise(function (resolve, reject) {
        debug('saving doc with data: ', data);
        dynamo.update({ hash: type, range: data.id }, removeTypeAndID(data)).
        then(function (res) {
          res = res || {};
          resolve(res);
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });},

    all: function all() {return new Promise(function (resolve, reject) {
        debug('fetching all docs');
        dynamo.findAll(type).
        then(function (res) {
          res = res || {};
          resolve(res);
        })["catch"](function (err) {
          error(err);
          reject(err);
        });
      });} };

}

function removeTypeAndID(data) {
  var copy = JSON.parse(JSON.stringify(data));
  delete copy.id;
  delete copy.type;
  return copy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImNvbnNvbGUiLCJsb2ciLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsIkFXU19TRUNSRVRfQUNDRVNTX0tFWSIsIkFXU19BQ0NFU1NfS0VZX0lEIiwiRXJyb3IiLCJkZWJ1ZyIsImVycm9yIiwiZHluYW1vVGFibGUiLCJkYiIsInJlZ2lvbiIsImFjY2Vzc0tleUlkIiwic2VjcmV0QWNjZXNzS2V5Iiwic3RvcmFnZSIsImZvckVhY2giLCJ0eXBlIiwiZ2V0U3RvcmFnZSIsImNvbmZpZyIsInRhYmxlIiwiZHluYW1vIiwiZ2V0IiwiaWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZpbmQiLCJoYXNoIiwicmFuZ2UiLCJ0aGVuIiwicmVzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImVyciIsInNhdmUiLCJkYXRhIiwidXBkYXRlIiwicmVtb3ZlVHlwZUFuZElEIiwiYWxsIiwiZmluZEFsbCIsImNvcHkiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7QUFDQSwwRCxnR0FEQTs7QUFHZSxvQkFBZ0MsS0FBL0JBLE1BQStCLHVFQUF0QixvQkFBTUMsT0FBTyxDQUFDQyxHQUFkLEVBQXNCO0FBQzdDLE1BQUksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFVBQWIsSUFBMkIsQ0FBQ0YsT0FBTyxDQUFDQyxHQUFSLENBQVlFLHFCQUF4QyxJQUFpRSxDQUFDSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUcsaUJBQWxGLEVBQXFHLE1BQU0sSUFBSUMsS0FBSixDQUFVLHNFQUFWLENBQU47QUFDckcsTUFBTUMsS0FBSyxHQUFHVCxNQUFNLENBQUMsMkJBQUQsRUFBOEIsT0FBOUIsQ0FBcEI7QUFDQSxNQUFNVSxLQUFLLEdBQUdWLE1BQU0sQ0FBQywyQkFBRCxFQUE4QixPQUE5QixDQUFwQjs7QUFFQSxNQUFNVyxXQUFXLEdBQUcsU0FBcEI7QUFDQSxNQUFNQyxF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eEIsSUFBZjtBQUNHYSxRQUFBQSxJQURILENBQ1EsVUFBVUMsR0FBVixFQUFlO0FBQ25CQSxVQUFBQSxHQUFHLEdBQUdBLEdBQUcsSUFBSSxFQUFiO0FBQ0FOLFVBQUFBLE9BQU8sQ0FBQ00sR0FBRCxDQUFQO0FBQ0QsU0FKSCxXQUlXLFVBQVVJLEdBQVYsRUFBZTtBQUN4QjFCLFVBQUFBLEtBQUssQ0FBQzBCLEdBQUQsQ0FBTDtBQUNBVCxVQUFBQSxNQUFNLENBQUNTLEdBQUQsQ0FBTjtBQUNELFNBUEQ7QUFRRCxPQVZVLENBQU4sRUE3QkEsRUFBUDs7QUF5Q0Q7O0FBRUQsU0FBU0ksZUFBVCxDQUEwQkYsSUFBMUIsRUFBZ0M7QUFDOUIsTUFBSUssSUFBSSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxTQUFMLENBQWVSLElBQWYsQ0FBWCxDQUFYO0FBQ0EsU0FBT0ssSUFBSSxDQUFDbkIsRUFBWjtBQUNBLFNBQU9tQixJQUFJLENBQUN6QixJQUFaO0FBQ0EsU0FBT3lCLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9qb3NodWFob292ZXIvYm90a2l0LXN0b3JhZ2UtZHluYW1vZGIvYmxvYi9tYXN0ZXIvc3JjL2luZGV4LmpzXG5pbXBvcnQgZHluYXN0eSBmcm9tICdkeW5hc3R5J1xuXG5leHBvcnQgZGVmYXVsdCAobG9nZ2VyID0gKCkgPT4gY29uc29sZS5sb2cpID0+IHtcbiAgaWYgKCFwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICFwcm9jZXNzLmVudi5BV1NfU0VDUkVUX0FDQ0VTU19LRVkgfHwgIXByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lEKSB0aHJvdyBuZXcgRXJyb3IoJ0FXU19SRUdJT04sIEFXU19TRUNSRVRfQUNDRVNTX0tFWSBhbmQgQVdTX0FDQ0VTU19LRVlfSUQgYXJlIHJlcXVpcmVkJylcbiAgY29uc3QgZGVidWcgPSBsb2dnZXIoJ3NlcnZpY2VzOnN0b3JhZ2U6ZHluYW1vREInLCAnZGVidWcnKVxuICBjb25zdCBlcnJvciA9IGxvZ2dlcignc2VydmljZXM6c3RvcmFnZTpkeW5hbW9EQicsICdlcnJvcicpXG5cbiAgY29uc3QgZHluYW1vVGFibGUgPSAnYmFzZWJvdCdcbiAgY29uc3QgZGIgPSBkeW5hc3R5KHtcbiAgICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04sXG4gICAgYWNjZXNzS2V5SWQ6IHByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lELFxuICAgIHNlY3JldEFjY2Vzc0tleTogcHJvY2Vzcy5lbnYuQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZLFxuICBkeW5hbW9UYWJsZX0pXG5cbiAgdmFyIHN0b3JhZ2UgPSB7fVsndGVhbXMnLCAnY2hhbm5lbHMnLCAndXNlcnMnLCAncmVzcG9uc2VzJ10uZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHN0b3JhZ2VbdHlwZV0gPSBnZXRTdG9yYWdlKGRiLCBjb25maWcuZHluYW1vVGFibGUsIHR5cGUpXG4gIH0pXG5cbiAgcmV0dXJuIHN0b3JhZ2Vcbn1cblxuZnVuY3Rpb24gZ2V0U3RvcmFnZSAoZGIsIHRhYmxlLCB0eXBlKSB7XG4gIHZhciBkeW5hbW8gPSBkYi50YWJsZSh0YWJsZSlcblxuICByZXR1cm4ge1xuICAgIGdldDogaWQgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZGVidWcoJ2ZldGNoaW5nIGRvYyB3aXRoIElEOiAnLCBpZClcbiAgICAgIGR5bmFtby5maW5kKHtoYXNoOiB0eXBlLCByYW5nZTogaWR9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgcmVzID0gcmVzIHx8IHt9XG4gICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJlcykubGVuZ3RoID09PSAwKSB7IC8vIG5vIHJlc3VsdCBmb3VuZFxuICAgICAgICAgICAgcmVzb2x2ZShudWxsKVxuICAgICAgICAgIH0gZWxzZSB7IC8vIHJlc3VsdCBmb3VuZFxuICAgICAgICAgICAgcmVzb2x2ZShyZXMpXG4gICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGVycm9yKGVycilcbiAgICAgICAgcmVqZWN0KGVycilcbiAgICAgIH0pXG4gICAgfSksXG5cbiAgICBzYXZlOiBkYXRhID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRlYnVnKCdzYXZpbmcgZG9jIHdpdGggZGF0YTogJywgZGF0YSlcbiAgICAgIGR5bmFtby51cGRhdGUoeyBoYXNoOiB0eXBlLCByYW5nZTogZGF0YS5pZCB9LCByZW1vdmVUeXBlQW5kSUQoZGF0YSkpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICByZXMgPSByZXMgfHwge31cbiAgICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBlcnJvcihlcnIpXG4gICAgICAgIHJlamVjdChlcnIpXG4gICAgICB9KVxuICAgIH0pLFxuXG4gICAgYWxsOiAoKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBkZWJ1ZygnZmV0Y2hpbmcgYWxsIGRvY3MnKVxuICAgICAgZHluYW1vLmZpbmRBbGwodHlwZSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgIHJlcyA9IHJlcyB8fCB7fVxuICAgICAgICAgIHJlc29sdmUocmVzKVxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGVycm9yKGVycilcbiAgICAgICAgcmVqZWN0KGVycilcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUeXBlQW5kSUQgKGRhdGEpIHtcbiAgdmFyIGNvcHkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICBkZWxldGUgY29weS5pZFxuICBkZWxldGUgY29weS50eXBlXG4gIHJldHVybiBjb3B5XG59XG4iXX0=