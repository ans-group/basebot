"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _awsSdk = _interopRequireDefault(require("aws-sdk"));
var _v = _interopRequireDefault(require("uuid/v4"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var
DynamoDB = _awsSdk["default"].DynamoDB;

var parse = DynamoDB.Converter.unmarshall;

var defaultModels = {
  teams: {
    hash: '_id' },

  channels: {
    hash: '_id' },

  users: {
    hash: '_id' } };var _default =



function _default() {var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var logger = config.logger ? config.logger : function () {return console.log;};
  var models = Object.assign(defaultModels, config.models);
  var debug = logger('services:storage:dynamoDB', 'debug');
  var error = logger('services:storage:dynamoDB', 'error');

  if (!process.env.AWS_REGION || !process.env.AWS_SECRET_ACCESS_KEY || !process.env.AWS_ACCESS_KEY_ID) {
    error('AWS_REGION, AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID are required');
  }
  var params = { region: process.env.AWS_REGION };
  if (process.env.NODE_ENV !== 'production') {
    params.endpoint = 'http://localhost:8000';
  }
  _awsSdk["default"].config.update(params);
  var db = new DynamoDB(params);
  var docClient = new DynamoDB.DocumentClient();
  var storage = {};
  var keys = Object.keys(models);
  keys.forEach(function (type) {
    var dynamoTable = process.env.RESOURCE_PREFIX + type;
    storage[type] = getStorage(db, dynamoTable);
  });

  function getStorage(db, table) {
    return {
      get: function get(hash, secondary) {return new Promise(function (resolve, reject) {
          var model = models[table.replace(process.env.RESOURCE_PREFIX, '')];
          var hashKey = model.hash;
          var secondaryKey = model.secondary;
          debug("fetching doc with ".concat(hashKey, " of ").concat(hash, " from  ").concat(table));
          var query = {};
          if (hashKey && hash) query[hashKey] = _defineProperty({}, hashKey === 'date' ? 'N' : 'S', String(hash));
          if (secondaryKey && secondary) query[secondaryKey] = _defineProperty({}, secondaryKey === 'date' ? 'N' : 'S', String(secondary));

          var cb = function cb(err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            var item = res.Item ? parse(res.Item) : null;
            debug('Response received: ', item);
            if (!item) {// no result found
              resolve(null);
            } else {// result found
              resolve(item);
            }
          };
          db.getItem({
            TableName: table,
            Key: query },
          cb);
        });},

      save: function save(data) {return new Promise(function (resolve, reject) {
          debug('saving doc with data: ', data);
          var hashKey = models[table.replace(process.env.RESOURCE_PREFIX, '')].hash;
          if (hashKey === '_id' && !data._id) {
            data._id = (0, _v["default"])();
          }
          docClient.put({
            TableName: table,
            Item: data },
          function (err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            res = res || {};
            resolve(res);
          });
        });},

      all: function all(query) {return new Promise(function (resolve, reject) {
          var params = {
            TableName: table };

          if (query) {
            params.ExpressionAttributeValues = {
              ':a': {
                S: query.value } };


            params.FilterExpression = "#".concat(query.key.charAt(0)).concat(query.attributes.indexOf(query.key) > -1 ? query.attributes.indexOf(query.key) : '', " = :a");
            params.ExpressionAttributeNames = {};
            params.ProjectionExpression = query.attributes.map(function (attribute, i) {return "#".concat(attribute.charAt(0)).concat(i);}).join(', ');
            if (!query.attributes.includes(query.key)) {
              params.ExpressionAttributeNames["#".concat(query.key.charAt(0))] = query.key;
            }
            query.attributes.forEach(function (attribute, i) {
              params.ExpressionAttributeNames["#".concat(attribute.charAt(0)).concat(i)] = attribute;
            });
          }
          debug("fetching all docs from ".concat(table));
          db.scan(params, function (err, res) {
            if (err) {
              error(err);
              return reject(err);
            }
            var items = res.Items.map(parse) || [];
            debug('docs received: ', items);
            resolve(items);
          });
        });} };

  }

  return storage;
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,