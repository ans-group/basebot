"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _request = _interopRequireDefault(require("request"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _readOnlyError(name) {throw new Error("\"" + name + "\" is read-only");}var _default =

function _default(logger) {
  var error = logger('middleware:luis', 'error');
  if (!process.env.LUIS_URI) {
    error('LUIS_URI must be set');
  }

  return { receive: receive, hearIntent: hearIntent };

  function receive() {
    var serviceUri = process.env.LUIS_URI.trim();
    if (serviceUri.lastIndexOf('&q=') != serviceUri.length - 3) {
      serviceUri += (_readOnlyError("serviceUri"), '&q=');
    }
    var minThreshold = process.env.LUIS_MIN_THRESHOLD || 0.1;
    var captureThreshold = process.env.LUIS_CAPTURE_THRESHOLD || 0.7;
    return function (bot, message, next) {
      // We will only process the text and either there's no topIntent
      // or the score for the topIntent is below the captureThreshold.
      if (message.text && (
      !message.topIntent || message.topIntent.score < captureThreshold)) {
        var uri = serviceUri + encodeURIComponent(message.text);
        _request["default"].get(uri, function (err, res, body) {
          try {
            if (!err) {
              var result = JSON.parse(body);

              if (result.topScoringIntent && result.topScoringIntent.intent !== 'None') {
                // API v2.0
                message.topIntent = result.topScoringIntent;
                message.entities = result.entities || [];
                message.action = result.topScoringIntent.actions && result.topScoringIntent.actions[0].triggered ? result.topScoringIntent.actions[0] : null;
              } else if (!result.topScoringIntent) {
                // API v1.0

                // Intents for the builtin Cortana app don't return a score.
                if (result.intents.length == 1 && !result.intents[0].hasOwnProperty('score')) {
                  result.intents[0].score = 1.0;
                }

                // Find top intent
                // - Only return entities for the model with the top intent.
                for (var i = 0; i < result.intents.length; i++) {
                  var intent = result.intents[i];
                  if (intent.score > minThreshold && (
                  !message.topIntent || intent.score > message.topIntent.score)) {
                    message.topIntent = intent;
                    message.entities = result.entities || [];
                    message.action = intent.actions && intent.actions[0].triggered ? intent.actions[0] : null;
                  }
                }
              }
            } else {
              console.error(err.toString());
            }
          } catch (e) {
            console.error(e.toString());
          }
          next();
        });
      } else {
        next();
      }
    };
  }

  function hearIntent(tests, _ref) {var topIntent = _ref.topIntent;
    if (topIntent) {
      var intent = topIntent.intent.toLowerCase();
      for (var i = 0; i < tests.length; i++) {
        if (tests[i].trim().toLowerCase() == intent) {
          return true;
        }
      }
    }
    return false;
  }
};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,