"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = _default;var _requestPromiseNative = _interopRequireDefault(require("request-promise-native"));
var _debug = _interopRequireDefault(require("debug"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

var log = (0, _debug["default"])('basebot:middleware:qnamaker:log');
var error = (0, _debug["default"])('basebot:middleware:qnamaker:error');function _default(_x, _x2) {return _ref.apply(this, arguments);}function _ref() {_ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(

  function _callee(bot, message) {var url, res;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (!(
            !process.env.QNA_HOST || !process.env.QNA_KBID || !process.env.QNA_KEY)) {_context.next = 3;break;}
            log('not using QNA Maker as no key provided');return _context.abrupt("return",
            bot.reply(message, "Didn't catch that, sorry"));case 3:

            url = "".concat(process.env.QNA_HOST, "/knowledgebases/").concat(process.env.QNA_KBID, "/generateAnswer");_context.prev = 4;_context.next = 7;return (

              _requestPromiseNative["default"].post(url, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': "EndpointKey ".concat(process.env.QNA_KEY) },

                json: { question: message.text } }));case 7:res = _context.sent;if (!(

            res.answers && res.answers.length && res.answers[0].score > process.env.QNA_THRESHOLD)) {_context.next = 10;break;}return _context.abrupt("return",
            bot.reply(message, { text: res.answers[0].answer, pushToken: message.raw_message.pushToken }));case 10:_context.next = 16;break;case 12:_context.prev = 12;_context.t0 = _context["catch"](4);


            bot.reply(message, "Didn't catch that, sorry");
            error('Could not check QNA Maker', _context.t0);case 16:case "end":return _context.stop();}}}, _callee, null, [[4, 12]]);}));return _ref.apply(this, arguments);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxvZyIsImVycm9yIiwiYm90IiwibWVzc2FnZSIsInByb2Nlc3MiLCJlbnYiLCJRTkFfSE9TVCIsIlFOQV9LQklEIiwiUU5BX0tFWSIsInJlcGx5IiwidXJsIiwicmVxdWVzdCIsInBvc3QiLCJtZXRob2QiLCJoZWFkZXJzIiwianNvbiIsInF1ZXN0aW9uIiwidGV4dCIsInJlcyIsImFuc3dlcnMiLCJsZW5ndGgiLCJzY29yZSIsIlFOQV9USFJFU0hPTEQiLCJhbnN3ZXIiLCJwdXNoVG9rZW4iLCJyYXdfbWVzc2FnZSJdLCJtYXBwaW5ncyI6InlHQUFBO0FBQ0Esc0Q7O0FBRUEsSUFBTUEsR0FBRyxHQUFHLHVCQUFNLGlDQUFOLENBQVo7QUFDQSxJQUFNQyxLQUFLLEdBQUcsdUJBQU0sbUNBQU4sQ0FBZCxDOztBQUVlLG1CQUFlQyxHQUFmLEVBQW9CQyxPQUFwQjtBQUNQLGFBQUNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFiLElBQXlCLENBQUNGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxRQUF0QyxJQUFrRCxDQUFDSCxPQUFPLENBQUNDLEdBQVIsQ0FBWUcsT0FEeEQ7QUFFUFIsWUFBQUEsR0FBRyxDQUFDLHdDQUFELENBQUgsQ0FGTztBQUdBRSxZQUFBQSxHQUFHLENBQUNPLEtBQUosQ0FBVU4sT0FBViw2QkFIQTs7QUFLTE8sWUFBQUEsR0FMSyxhQUtJTixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFMaEIsNkJBSzJDRixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsUUFMdkQ7O0FBT1dJLCtDQUFRQyxJQUFSLENBQWFGLEdBQWIsRUFBa0I7QUFDaENHLGdCQUFBQSxNQUFNLEVBQUUsTUFEd0I7QUFFaENDLGdCQUFBQSxPQUFPLEVBQUU7QUFDTCxrQ0FBZ0Isa0JBRFg7QUFFTCx5REFBZ0NWLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxPQUE1QyxDQUZLLEVBRnVCOztBQU1oQ08sZ0JBQUFBLElBQUksRUFBRSxFQUFFQyxRQUFRLEVBQUViLE9BQU8sQ0FBQ2MsSUFBcEIsRUFOMEIsRUFBbEIsQ0FQWCxTQU9EQyxHQVBDOztBQWVIQSxZQUFBQSxHQUFHLENBQUNDLE9BQUosSUFBZUQsR0FBRyxDQUFDQyxPQUFKLENBQVlDLE1BQTNCLElBQXFDRixHQUFHLENBQUNDLE9BQUosQ0FBWSxDQUFaLEVBQWVFLEtBQWYsR0FBdUJqQixPQUFPLENBQUNDLEdBQVIsQ0FBWWlCLGFBZnJFO0FBZ0JJcEIsWUFBQUEsR0FBRyxDQUFDTyxLQUFKLENBQVVOLE9BQVYsRUFBbUIsRUFBRWMsSUFBSSxFQUFFQyxHQUFHLENBQUNDLE9BQUosQ0FBWSxDQUFaLEVBQWVJLE1BQXZCLEVBQStCQyxTQUFTLEVBQUVyQixPQUFPLENBQUNzQixXQUFSLENBQW9CRCxTQUE5RCxFQUFuQixDQWhCSjs7O0FBbUJQdEIsWUFBQUEsR0FBRyxDQUFDTyxLQUFKLENBQVVOLE9BQVY7QUFDQUYsWUFBQUEsS0FBSyxDQUFDLDJCQUFELGNBQUwsQ0FwQk8sMEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UtbmF0aXZlJ1xuaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJ1xuXG5jb25zdCBsb2cgPSBEZWJ1ZygnYmFzZWJvdDptaWRkbGV3YXJlOnFuYW1ha2VyOmxvZycpXG5jb25zdCBlcnJvciA9IERlYnVnKCdiYXNlYm90Om1pZGRsZXdhcmU6cW5hbWFrZXI6ZXJyb3InKVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbihib3QsIG1lc3NhZ2UpIHtcbiAgICBpZiAoIXByb2Nlc3MuZW52LlFOQV9IT1NUIHx8ICFwcm9jZXNzLmVudi5RTkFfS0JJRCB8fCAhcHJvY2Vzcy5lbnYuUU5BX0tFWSkge1xuICAgICAgICBsb2coJ25vdCB1c2luZyBRTkEgTWFrZXIgYXMgbm8ga2V5IHByb3ZpZGVkJylcbiAgICAgICAgcmV0dXJuIGJvdC5yZXBseShtZXNzYWdlLCBgRGlkbid0IGNhdGNoIHRoYXQsIHNvcnJ5YClcbiAgICB9XG4gICAgY29uc3QgdXJsID0gYCR7cHJvY2Vzcy5lbnYuUU5BX0hPU1R9L2tub3dsZWRnZWJhc2VzLyR7cHJvY2Vzcy5lbnYuUU5BX0tCSUR9L2dlbmVyYXRlQW5zd2VyYFxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QucG9zdCh1cmwsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgRW5kcG9pbnRLZXkgJHtwcm9jZXNzLmVudi5RTkFfS0VZfWBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBqc29uOiB7IHF1ZXN0aW9uOiBtZXNzYWdlLnRleHQgfVxuICAgICAgICB9KVxuICAgICAgICBpZiAocmVzLmFuc3dlcnMgJiYgcmVzLmFuc3dlcnMubGVuZ3RoICYmIHJlcy5hbnN3ZXJzWzBdLnNjb3JlID4gcHJvY2Vzcy5lbnYuUU5BX1RIUkVTSE9MRCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvdC5yZXBseShtZXNzYWdlLCB7IHRleHQ6IHJlcy5hbnN3ZXJzWzBdLmFuc3dlciwgcHVzaFRva2VuOiBtZXNzYWdlLnJhd19tZXNzYWdlLnB1c2hUb2tlbiB9KVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGJvdC5yZXBseShtZXNzYWdlLCBgRGlkbid0IGNhdGNoIHRoYXQsIHNvcnJ5YClcbiAgICAgICAgZXJyb3IoJ0NvdWxkIG5vdCBjaGVjayBRTkEgTWFrZXInLCBlcnIpXG4gICAgfVxufVxuIl19