"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _requestPromiseNative = _interopRequireDefault(require("request-promise-native"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}var _default =

function _default(logger) {return (/*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(bot, message) {var info, error, url, res;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                info = logger('qnaMaker', 'info');
                error = logger('qnaMaker', 'error');if (!(
                !process.env.QNA_HOST || !process.env.QNA_KBID || !process.env.QNA_KEY)) {_context.next = 5;break;}
                info('not using QNA Maker as no key provided');return _context.abrupt("return",
                bot.reply(message, "Didn't catch that, sorry"));case 5:

                url = "".concat(process.env.QNA_HOST, "/knowledgebases/").concat(process.env.QNA_KBID, "/generateAnswer");_context.prev = 6;_context.next = 9;return (

                  _requestPromiseNative["default"].post(url, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                      'Authorization': "EndpointKey ".concat(process.env.QNA_KEY) },

                    json: { question: message.text } }));case 9:res = _context.sent;if (!(

                res.answers && res.answers.length && res.answers[0].score > process.env.QNA_THRESHOLD)) {_context.next = 12;break;}return _context.abrupt("return",
                bot.reply(message, res.answers[0].answer));case 12:_context.next = 18;break;case 14:_context.prev = 14;_context.t0 = _context["catch"](6);


                bot.reply(message, "Didn't catch that, sorry");
                error('Could not check QNA Maker', _context.t0);case 18:case "end":return _context.stop();}}}, _callee, null, [[6, 14]]);}));return function (_x, _x2) {return _ref.apply(this, arguments);};}());};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsImJvdCIsIm1lc3NhZ2UiLCJpbmZvIiwiZXJyb3IiLCJwcm9jZXNzIiwiZW52IiwiUU5BX0hPU1QiLCJRTkFfS0JJRCIsIlFOQV9LRVkiLCJyZXBseSIsInVybCIsInJlcXVlc3QiLCJwb3N0IiwibWV0aG9kIiwiaGVhZGVycyIsImpzb24iLCJxdWVzdGlvbiIsInRleHQiLCJyZXMiLCJhbnN3ZXJzIiwibGVuZ3RoIiwic2NvcmUiLCJRTkFfVEhSRVNIT0xEIiwiYW5zd2VyIl0sIm1hcHBpbmdzIjoidUdBQUEsc0Y7O0FBRWUsa0JBQUFBLE1BQU0sd0dBQUksaUJBQWVDLEdBQWYsRUFBb0JDLE9BQXBCO0FBQ2pCQyxnQkFBQUEsSUFEaUIsR0FDVkgsTUFBTSxDQUFDLFVBQUQsRUFBYSxNQUFiLENBREk7QUFFakJJLGdCQUFBQSxLQUZpQixHQUVUSixNQUFNLENBQUMsVUFBRCxFQUFhLE9BQWIsQ0FGRztBQUduQixpQkFBQ0ssT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQWIsSUFBeUIsQ0FBQ0YsT0FBTyxDQUFDQyxHQUFSLENBQVlFLFFBQXRDLElBQWtELENBQUNILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxPQUg1QztBQUlyQk4sZ0JBQUFBLElBQUksQ0FBQyx3Q0FBRCxDQUFKLENBSnFCO0FBS2RGLGdCQUFBQSxHQUFHLENBQUNTLEtBQUosQ0FBVVIsT0FBViw2QkFMYzs7QUFPakJTLGdCQUFBQSxHQVBpQixhQU9STixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFQSiw2QkFPK0JGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxRQVAzQzs7QUFTSEksbURBQVFDLElBQVIsQ0FBYUYsR0FBYixFQUFrQjtBQUNsQ0csb0JBQUFBLE1BQU0sRUFBRSxNQUQwQjtBQUVsQ0Msb0JBQUFBLE9BQU8sRUFBRTtBQUNQLHNDQUFnQixrQkFEVDtBQUVQLDZEQUFnQ1YsT0FBTyxDQUFDQyxHQUFSLENBQVlHLE9BQTVDLENBRk8sRUFGeUI7O0FBTWxDTyxvQkFBQUEsSUFBSSxFQUFFLEVBQUVDLFFBQVEsRUFBRWYsT0FBTyxDQUFDZ0IsSUFBcEIsRUFONEIsRUFBbEIsQ0FURyxTQVNmQyxHQVRlOztBQWlCakJBLGdCQUFBQSxHQUFHLENBQUNDLE9BQUosSUFBZUQsR0FBRyxDQUFDQyxPQUFKLENBQVlDLE1BQTNCLElBQXFDRixHQUFHLENBQUNDLE9BQUosQ0FBWSxDQUFaLEVBQWVFLEtBQWYsR0FBdUJqQixPQUFPLENBQUNDLEdBQVIsQ0FBWWlCLGFBakJ2RDtBQWtCWnRCLGdCQUFBQSxHQUFHLENBQUNTLEtBQUosQ0FBVVIsT0FBVixFQUFtQmlCLEdBQUcsQ0FBQ0MsT0FBSixDQUFZLENBQVosRUFBZUksTUFBbEMsQ0FsQlk7OztBQXFCckJ2QixnQkFBQUEsR0FBRyxDQUFDUyxLQUFKLENBQVVSLE9BQVY7QUFDQUUsZ0JBQUFBLEtBQUssQ0FBQywyQkFBRCxjQUFMLENBdEJxQiwwRUFBSix5RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZS1uYXRpdmUnXG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlciA9PiBhc3luYyBmdW5jdGlvbihib3QsIG1lc3NhZ2UpIHtcbiAgY29uc3QgaW5mbyA9IGxvZ2dlcigncW5hTWFrZXInLCAnaW5mbycpXG4gIGNvbnN0IGVycm9yID0gbG9nZ2VyKCdxbmFNYWtlcicsICdlcnJvcicpXG4gIGlmICghcHJvY2Vzcy5lbnYuUU5BX0hPU1QgfHwgIXByb2Nlc3MuZW52LlFOQV9LQklEIHx8ICFwcm9jZXNzLmVudi5RTkFfS0VZKSB7XG4gICAgaW5mbygnbm90IHVzaW5nIFFOQSBNYWtlciBhcyBubyBrZXkgcHJvdmlkZWQnKVxuICAgIHJldHVybiBib3QucmVwbHkobWVzc2FnZSwgYERpZG4ndCBjYXRjaCB0aGF0LCBzb3JyeWApXG4gIH1cbiAgY29uc3QgdXJsID0gYCR7cHJvY2Vzcy5lbnYuUU5BX0hPU1R9L2tub3dsZWRnZWJhc2VzLyR7cHJvY2Vzcy5lbnYuUU5BX0tCSUR9L2dlbmVyYXRlQW5zd2VyYFxuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3QucG9zdCh1cmwsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBFbmRwb2ludEtleSAke3Byb2Nlc3MuZW52LlFOQV9LRVl9YFxuICAgICAgfSxcbiAgICAgIGpzb246IHsgcXVlc3Rpb246IG1lc3NhZ2UudGV4dCB9XG4gICAgfSlcbiAgICBpZiAocmVzLmFuc3dlcnMgJiYgcmVzLmFuc3dlcnMubGVuZ3RoICYmIHJlcy5hbnN3ZXJzWzBdLnNjb3JlID4gcHJvY2Vzcy5lbnYuUU5BX1RIUkVTSE9MRCkge1xuICAgICAgcmV0dXJuIGJvdC5yZXBseShtZXNzYWdlLCByZXMuYW5zd2Vyc1swXS5hbnN3ZXIpXG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBib3QucmVwbHkobWVzc2FnZSwgYERpZG4ndCBjYXRjaCB0aGF0LCBzb3JyeWApXG4gICAgZXJyb3IoJ0NvdWxkIG5vdCBjaGVjayBRTkEgTWFrZXInLCBlcnIpXG4gIH1cbn1cbiJdfQ==