"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = exports.heard = void 0;var _botkit = require("botkit");
var _request = _interopRequireDefault(require("request"));
var _alexaResponse = _interopRequireDefault(require("alexa-response"));var _this = void 0;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}

var heard = function heard(storage) {return function (bot, message, next) {
    if (message.alexa && message.intent && message.intent.name && storage && storage.responses) {
      console.log("fetching intent: ".concat(message.intent.name));
      storage.responses.get(message.intent.name).
      then(function (response) {
        if (response) {
          return bot.reply(message, response.response);
        }
        next();
      });
    } else {
      next();
    }
  };};exports.heard = heard;

var AlexaBot = function AlexaBot(configuration) {
  // Create a core botkit bot
  var alexaBot = (0, _botkit.core)(configuration || {});

  alexaBot.on('sessionStart', function (bot, message) {
    if (!message) return;
    bot.send({
      text: configuration.welcomeMessage || 'Hi, how can I help?',
      user: message.user,
      channel: message.channel,
      to: message.user,
      send: message.raw_message.send,
      question: true });

  });

  // customize the bot definition, which will be used when new connections
  // spawn!
  alexaBot.defineBot(function (botkit, config) {
    var bot = {
      type: 'alexa',
      botkit: botkit,
      config: config || {},
      utterances: botkit.utterances };


    bot.startConversation = function (message, cb) {
      botkit.startConversation(_this, message, cb);
    };

    bot.createConversation = function (message, cb) {
      botkit.createConversation(_this, message, cb);
    };

    bot.findConversation = function (message, cb) {
      botkit.debug('CUSTOM FIND CONVO', message.user, message.channel);
      /* eslint-disable no-plusplus */
      for (var t = 0; t < botkit.tasks.length; t++) {
        for (var c = 0; c < botkit.tasks[t].convos.length; c++) {
          var con = botkit.tasks[t].convos[c];
          if (con.isActive() && con.source_message.user === message.user) {
            botkit.debug('FOUND EXISTING CONVO!');
            cb(botkit.tasks[t].convos[c]);
            return;
          }
        }
        /* eslint-enable */
      }
      cb();
    };

    bot.send = function (message) {var
      text = message.text,question = message.question,progressive = message.progressive,send = message.send,typing = message.typing;
      if (progressive || typing) {
        (0, _request["default"])({
          method: 'POST',
          url: "".concat(message.alexa.apiEndpoint, "/v1/directives"),
          auth: {
            bearer: message.alexa.apiAccessToken },

          json: true,
          body: {
            header: {
              requestId: message.channel },

            directive: {
              type: 'VoicePlayer.Speak',
              speech: text } } });



      } else {
        var reply = question ?
        _alexaResponse["default"].ask(text) :
        _alexaResponse["default"].say(text);
        send(reply.build());
      }
    };

    bot.reply = function (src, resp, cb) {
      var message = typeof resp === 'string' ?
      { text: resp } :
      resp;

      message.user = src.user;
      message.channel = src.channel;
      message.to = src.user;
      message.send = src.send;
      message.alexa = src.alexa;

      bot.send(message, cb);
    };

    return bot;
  });

  // set up a web route for receiving incoming requests from alexa
  alexaBot.createWebhookEndpoints = function (webserver, bot) {
    // notify the user that the webhook is running
    alexaBot.log("** Serving webhook endpoint for Alexa Platform at: http://".concat(alexaBot.config.hostname, ":").concat(alexaBot.config.port, "/alexa/receive"));
    webserver.post('/alexa/receive', function (_ref, res) {var body = _ref.body;
      alexaBot.debug('GOT A MESSAGE HOOK');

      var normalizeTypes = {
        LaunchRequest: 'sessionStart',
        IntentRequest: 'message_received',
        SessionEndedRequest: 'conversationEnded' };var


      session = body.session,request = body.request,context = body.context;
      var userIdArr = session && session.user && session.user.userId && session.user.userId.split('.');
      var userId = userIdArr && userIdArr[userIdArr.length - 1];
      // parse the request from alexa
      var payload = {
        text: request.intent ? request.intent.name : '',
        type: normalizeTypes[request.type] || request.type,
        intent: request.intent,
        slots: request.intent && request.intent.slots,
        user: userId,
        channel: request && request.requestId,
        timestamp: request.timestamp,
        platform: 'alexa',
        alexa: context && context.System,
        send: function send() {return res.send.apply(res, arguments);}

        // notify botkit we received an event
      };alexaBot.ingest(bot, payload, res);
    });

    return alexaBot;
  };

  return alexaBot;
};var _default =

function _default(_ref2) {var storage = _ref2.storage,logger = _ref2.logger;
  var controller = AlexaBot({ storage: storage });
  var info = logger('channels:alexa', 'info');
  return {
    controller: controller,
    name: 'alexa',
    start: function start(_ref3) {var app = _ref3.app;
      var bot = controller.spawn({});
      controller.createWebhookEndpoints(app, bot);
      controller.startTicking();
      info('Azure bot listening');
    } };

};exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,