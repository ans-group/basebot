"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _CoreBot = _interopRequireDefault(require("botkit/lib/CoreBot"));
var _ws = _interopRequireDefault(require("ws"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

function WebBot(configuration) {
  var controller = (0, _CoreBot["default"])(configuration || {});
  var error = configuration.logger ?
  configuration.logger.error('controller:web', 'error') :
  console.error;

  if (controller.config.typingDelayFactor === undefined) {
    controller.config.typingDelayFactor = 1;
  }

  controller.excludeFromConversations(['hello', 'welcome_back', 'reconnect']);

  controller.openSocketServer = function (server) {var wsconfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { port: 3001 };

    // create the socket server along side the existing webserver.
    var wss = new _ws["default"].Server(_objectSpread({
      server: server },
    wsconfig));


    // Expose the web socket server object to the controller so it can be used later.
    controller.wss = wss;

    function heartbeat() {
      this.isAlive = true;
    }

    wss.on('connection', function connection(ws) {
      ws.isAlive = true;
      ws.on('pong', heartbeat);
      // search through all the convos, if a bot matches, update its ws
      var bot = controller.spawn();
      bot.ws = ws;
      bot.connected = true;

      ws.on('message', function incoming(message) {
        try {
          var message = JSON.parse(message);
          controller.ingest(bot, message, ws);
        } catch (e) {
          var alert = ["Error parsing incoming message from websocket.", "Message must be JSON, and should be in the format documented here:", "https://botkit.ai/docs/readme-web.html#message-objects"];




          error(alert.join('\n'));
          error(e);
        }
      });

      ws.on('error', function (err) {return error('Websocket Error: ', err);});

      ws.on('close', function () {
        bot.connected = false;
      });
    });

    setInterval(function ping() {
      wss.clients.forEach(function each(ws) {
        if (ws.isAlive === false) {
          return ws.terminate();
        }
        //  if (ws.isAlive === false) return ws.terminate()
        ws.isAlive = false;
        ws.ping('', false, true);
      });
    }, 30000);
  };

  controller.middleware.ingest.use(function (bot, message, reply_channel, next) {

    /*
                                                                                  * this could be a message from the WebSocket
                                                                                  * or it might be coming from a webhook.
                                                                                  * configure the bot appropriately so the reply goes to the right place!
                                                                                  */
    if (!bot.ws) {
      bot.http_response = reply_channel;
    }

    /*
       * look for an existing conversation for this user/channel combo
       * why not just pass in message? because we only care if there is a conversation  ongoing
       * and we might be dealing with "silent" message that would not otherwise match a conversation
       */
    bot.findConversation({
      user: message.user,
      channel: message.channel },
    function (convo) {
      if (convo) {
        if (bot.ws) {
          // replace the websocket connection
          convo.task.bot.ws = bot.ws;
          convo.task.bot.connected = true;
          if (message.type == 'hello' || message.type == 'welcome_back') {
            message.type = 'reconnect';
          }
        } else {

          /*
                 * replace the reply channel in the active conversation
                 * this is the one that gets used to send the actual reply
                 */
          convo.task.bot.http_response = bot.http_response;
        }
      }
      next();
    });
  });

  controller.middleware.categorize.use(function (bot, message, next) {
    if (message.type == 'message') {
      message.type = 'message_received';
    }

    next();
  });

  // simple message clone because its already in the right format!
  controller.middleware.format.use(function (bot, message, platform_message, next) {
    for (var key in message) {
      platform_message[key] = message[key];
    }
    if (!platform_message.type) {
      platform_message.type = 'message';
    }
    next();
  });

  controller.defineBot(function (botkit, config) {
    var bot = {
      type: 'socket',
      botkit: botkit,
      config: config || {},
      utterances: botkit.utterances };


    bot.startConversation = function (message, cb) {
      botkit.startConversation(this, message, cb);
    };

    bot.createConversation = function (message, cb) {
      botkit.createConversation(this, message, cb);
    };

    bot.send = function (message, cb) {
      if (bot.connected || !bot.ws) {
        if (bot.ws) {
          try {
            if (bot.ws && bot.ws.readyState === _ws["default"].OPEN) {
              bot.ws.send(JSON.stringify(message), function (err) {
                if (cb) {
                  return cb(err, message);
                }
              });
            } else {
              error('Cannot send message to closed socket');
            }
          } catch (err) {
            return cb(err);
          }
        } else {
          try {
            bot.http_response.json(message);
            if (cb) {
              cb(null, message);
            }
          } catch (err) {
            if (cb) {
              return cb(err, message);
            } else {
              error('ERROR SENDING', err);
            }
          }
        }
      } else {
        setTimeout(function () {
          bot.send(message, cb);
        }, 3000);
      }
    };

    bot.startTyping = function () {
      if (bot.connected) {
        try {
          if (bot.ws && bot.ws.readyState === _ws["default"].OPEN) {
            bot.ws.send(JSON.stringify({
              type: 'typing' }),
            function (err) {
              if (err) {
                error("startTyping failed: ".concat(err.message));
              }
            });
          } else {
            error('Socket closed! Cannot send message');
          }
        } catch (err) {
          error('startTyping failed: ', err);
        }
      }
    };

    bot.typingDelay = function (_ref) {var typingDelay = _ref.typingDelay,text = _ref.text;return new Promise(function (resolve) {
        var typingLength = 0;
        if (typingDelay) {
          typingLength = typingDelay;
        } else {
          var textLength;
          if (text) {
            textLength = text.length;
          } else {
            textLength = 80; // default attachment text length
          }

          var avgWPM = 150;
          var avgCPM = avgWPM * 7;

          typingLength = Math.min(Math.floor(textLength / (avgCPM / 60)) * 1000, 2000) * controller.config.typingDelayFactor;
        }

        setTimeout(function () {
          resolve();
        }, typingLength);
      });};

    bot.replyWithTyping = function (_ref2, resp, cb) {var user = _ref2.user,channel = _ref2.channel;
      bot.startTyping();
      bot.typingDelay(resp).then(function () {
        if (typeof resp == 'string') {
          resp = {
            text: resp };

        }

        resp.user = user;
        resp.channel = channel;
        resp.to = user;

        bot.say(resp, cb);
      });
    };

    bot.reply = function (src, resp, cb) {
      if (typeof resp == 'string') {
        resp = {
          text: resp };

      }

      resp.user = src.user;
      resp.channel = src.channel;
      resp.to = src.user;

      if (resp.typing || resp.typingDelay || controller.config.replyWithTyping) {
        bot.replyWithTyping(src, resp, cb);
      } else {
        bot.say(resp, cb);
      }
    };

    bot.findConversation = function (_ref3, cb) {var user = _ref3.user,channel = _ref3.channel,type = _ref3.type;
      botkit.debug('CUSTOM FIND CONVO', user, channel);
      for (var t = 0; t < botkit.tasks.length; t++) {
        for (var c = 0; c < botkit.tasks[t].convos.length; c++) {
          if (
          botkit.tasks[t].convos[c].isActive() &&
          botkit.tasks[t].convos[c].source_message.user == user &&
          !botkit.excludedEvents.includes(type) // this type of message should not be included
          ) {
              botkit.debug('FOUND EXISTING CONVO!');
              cb(botkit.tasks[t].convos[c]);
              return;
            }
        }
      }

      cb();
    };

    /*
        * return info about the specific instance of this bot
        * including identity information, and any other info that is relevant
        */
    bot.getInstanceInfo = function (cb) {return new Promise(function (resolve) {
        var instance = {
          identity: {},
          team: {} };


        if (bot.identity) {
          instance.identity.name = bot.identity.name;
          instance.identity.id = bot.identity.id;

          instance.team.name = bot.identity.name;
          instance.team.url = bot.identity.root_url;
          instance.team.id = bot.identity.name;
        } else {
          instance.identity.name = 'Botkit Web';
          instance.identity.id = 'web';
        }

        if (cb) cb(null, instance);
        resolve(instance);
      });};

    bot.getMessageUser = function (message, cb) {return new Promise(function (resolve) {
        // normalize this into what botkit wants to see
        controller.storage.users.get(message.user, function (err, user) {
          if (!user) {
            user = {
              id: message.user,
              name: 'Unknown',
              attributes: {} };

          }

          var profile = {
            id: user.id,
            username: user.name,
            first_name: user.attributes.first_name || '',
            last_name: user.attributes.last_name || '',
            full_name: user.attributes.full_name || '',
            email: user.attributes.email, // may be blank
            gender: user.attributes.gender, // no source for this info
            timezone_offset: user.attributes.timezone_offset,
            timezone: user.attributes.timezone };


          if (cb) {
            cb(null, profile);
          }
          resolve(profile);
        });
      });};

    return bot;
  });

  controller.handleWebhookPayload = function (_ref4, res) {var body = _ref4.body;
    var payload = body;
    controller.ingest(controller.spawn({}), payload, res);
  };

  // change the speed of typing a reply in a conversation
  controller.setTypingDelayFactor = function (delayFactor) {
    controller.config.typingDelayFactor = delayFactor;
  };

  // Substantially shorten the delay for processing messages in conversations
  controller.setTickDelay(10);

  return controller;
}var _default =

WebBot;exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,